#[allow(non_upper_case_globals)]

use std::rc::Rc;
use std::cell::RefCell;
use token::token::Token;
use lexer::literal::Literal;
use lexer::stack_state::StackState;

static _lexer_actions: [i16 ; 1061] = [ 0, 1, 0, 1, 24, 1, 25, 1, 28, 1, 29, 1, 30, 1, 42, 1, 43, 1, 44, 1, 45, 1, 46, 1, 47, 1, 48, 1, 49, 1, 50, 1, 51, 1, 52, 1, 53, 1, 54, 1, 55, 1, 56, 1, 57, 1, 58, 1, 59, 1, 60, 1, 62, 1, 63, 1, 64, 1, 65, 1, 66, 1, 67, 1, 68, 1, 69, 1, 70, 1, 72, 1, 73, 1, 74, 1, 76, 1, 77, 1, 78, 1, 79, 1, 82, 1, 83, 1, 84, 1, 85, 1, 86, 1, 87, 1, 88, 1, 89, 1, 90, 1, 91, 1, 92, 1, 93, 1, 94, 1, 95, 1, 96, 1, 97, 1, 98, 1, 99, 1, 100, 1, 101, 1, 102, 1, 103, 1, 104, 1, 105, 1, 106, 1, 107, 1, 108, 1, 109, 1, 110, 1, 114, 1, 115, 1, 116, 1, 117, 1, 118, 1, 119, 1, 120, 1, 121, 1, 122, 1, 123, 1, 124, 1, 125, 1, 126, 1, 127, 1, 128, 1, 129, 1, 130, 1, 131, 1, 132, 1, 133, 1, 134, 1, 135, 1, 136, 1, 137, 1, 138, 1, 139, 1, 140, 1, 141, 1, 142, 1, 143, 1, 145, 1, 146, 1, 147, 1, 152, 1, 153, 1, 154, 1, 155, 1, 156, 1, 157, 1, 158, 1, 159, 1, 164, 1, 165, 1, 166, 1, 167, 1, 168, 1, 171, 1, 172, 1, 173, 1, 174, 1, 177, 1, 178, 1, 180, 1, 181, 1, 182, 1, 183, 1, 184, 1, 185, 1, 187, 1, 188, 1, 191, 1, 192, 1, 193, 1, 194, 1, 196, 1, 197, 1, 204, 1, 205, 1, 206, 1, 207, 1, 208, 1, 209, 1, 210, 1, 211, 1, 212, 1, 213, 1, 214, 1, 215, 1, 216, 1, 217, 1, 218, 1, 219, 1, 220, 1, 222, 1, 223, 1, 224, 1, 228, 1, 230, 1, 231, 1, 232, 1, 233, 1, 234, 1, 235, 1, 236, 1, 237, 1, 238, 1, 239, 1, 241, 1, 242, 1, 243, 1, 244, 1, 245, 1, 246, 1, 248, 1, 249, 1, 260, 1, 261, 1, 262, 1, 263, 1, 264, 1, 265, 1, 266, 1, 267, 1, 268, 1, 269, 1, 270, 1, 271, 1, 272, 1, 273, 1, 275, 1, 277, 1, 278, 1, 279, 1, 280, 1, 281, 1, 282, 1, 285, 1, 286, 1, 288, 1, 289, 1, 290, 1, 291, 1, 292, 1, 293, 1, 294, 1, 295, 1, 296, 1, 297, 1, 298, 1, 299, 1, 300, 1, 301, 1, 302, 1, 303, 2, 0, 29, 2, 0, 58, 2, 0, 68, 2, 0, 76, 2, 0, 82, 2, 0, 87, 2, 0, 92, 2, 0, 96, 2, 0, 102, 2, 0, 152, 2, 0, 156, 2, 0, 157, 2, 0, 296, 2, 0, 297, 2, 2, 274, 2, 3, 274, 2, 4, 274, 2, 5, 274, 2, 6, 274, 2, 7, 274, 2, 8, 61, 2, 8, 71, 2, 9, 61, 2, 9, 71, 2, 10, 61, 2, 10, 71, 2, 14, 61, 2, 14, 71, 2, 16, 61, 2, 16, 71, 2, 17, 61, 2, 17, 71, 2, 18, 61, 2, 18, 71, 2, 19, 61, 2, 19, 71, 2, 20, 61, 2, 20, 71, 2, 21, 61, 2, 21, 71, 2, 22, 61, 2, 22, 71, 2, 23, 61, 2, 23, 71, 2, 24, 75, 2, 24, 81, 2, 25, 0, 2, 25, 42, 2, 25, 43, 2, 25, 44, 2, 25, 128, 2, 25, 136, 2, 25, 146, 2, 25, 157, 2, 25, 168, 2, 25, 170, 2, 25, 187, 2, 25, 194, 2, 25, 195, 2, 25, 204, 2, 25, 231, 2, 25, 239, 2, 25, 240, 2, 25, 246, 2, 25, 247, 2, 25, 286, 2, 25, 287, 2, 25, 300, 2, 26, 163, 2, 26, 186, 2, 26, 225, 2, 27, 283, 2, 28, 29, 2, 29, 0, 2, 29, 128, 2, 29, 136, 2, 29, 146, 2, 29, 169, 2, 29, 187, 2, 29, 194, 2, 29, 231, 2, 29, 239, 2, 29, 246, 2, 29, 286, 2, 29, 300, 2, 30, 144, 2, 30, 221, 2, 30, 229, 2, 31, 144, 2, 31, 221, 2, 31, 229, 2, 32, 221, 2, 32, 229, 2, 33, 221, 2, 33, 229, 2, 34, 221, 2, 34, 229, 2, 35, 221, 2, 35, 229, 2, 36, 221, 2, 36, 229, 2, 37, 221, 2, 38, 276, 2, 39, 162, 2, 39, 226, 2, 39, 284, 2, 40, 160, 2, 40, 161, 2, 40, 179, 2, 40, 227, 2, 40, 282, 2, 41, 283, 2, 45, 51, 2, 46, 51, 2, 47, 51, 2, 48, 51, 2, 49, 51, 2, 50, 51, 2, 52, 292, 2, 55, 0, 2, 55, 111, 2, 55, 112, 2, 55, 113, 2, 55, 148, 2, 55, 149, 2, 55, 150, 2, 55, 151, 2, 55, 175, 2, 55, 176, 2, 55, 189, 2, 55, 190, 2, 55, 199, 2, 55, 200, 2, 55, 201, 2, 55, 202, 2, 55, 203, 2, 55, 250, 2, 55, 251, 2, 55, 252, 2, 55, 253, 2, 55, 254, 2, 55, 255, 2, 55, 256, 2, 55, 257, 2, 55, 258, 2, 55, 259, 3, 0, 80, 24, 3, 9, 11, 61, 3, 9, 11, 71, 3, 9, 12, 61, 3, 9, 12, 71, 3, 13, 12, 61, 3, 13, 12, 71, 3, 14, 12, 61, 3, 14, 12, 71, 3, 15, 11, 61, 3, 15, 11, 71, 3, 21, 22, 61, 3, 21, 22, 71, 3, 24, 23, 61, 3, 24, 23, 71, 3, 28, 29, 0, 3, 28, 29, 128, 3, 28, 29, 136, 3, 28, 29, 146, 3, 28, 29, 169, 3, 28, 29, 187, 3, 28, 29, 194, 3, 28, 29, 231, 3, 28, 29, 239, 3, 28, 29, 246, 3, 28, 29, 286, 3, 28, 29, 300, 3, 51, 1, 274, 3, 55, 0, 151, 3, 55, 25, 150, 3, 55, 25, 176, 3, 55, 29, 198, 3, 55, 43, 149, 4, 9, 11, 12, 61, 4, 9, 11, 12, 71, 4, 15, 11, 12, 61, 4, 15, 11, 12, 71, 4, 45, 51, 1, 274, 4, 46, 51, 1, 274, 4, 47, 51, 1, 274, 4, 48, 51, 1, 274, 4, 49, 51, 1, 274, 4, 50, 51, 1, 274, 4, 55, 25, 43, 149, 4, 55, 28, 29, 198, 0 , 0 ];
static _lexer_key_offsets: [i16 ; 812] = [ 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 35, 44, 54, 63, 67, 72, 76, 81, 85, 88, 92, 99, 102, 104, 105, 110, 115, 124, 146, 155, 165, 174, 178, 183, 187, 192, 196, 199, 203, 210, 213, 215, 216, 221, 226, 235, 257, 266, 276, 285, 307, 316, 326, 335, 357, 366, 376, 385, 394, 397, 398, 399, 411, 412, 413, 425, 426, 427, 463, 499, 512, 525, 538, 551, 564, 577, 590, 604, 617, 630, 643, 656, 669, 682, 695, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 737, 738, 739, 755, 762, 763, 771, 779, 787, 795, 803, 804, 826, 835, 838, 846, 853, 854, 861, 862, 875, 889, 903, 917, 931, 932, 933, 945, 954, 955, 956, 957, 966, 967, 973, 974, 985, 989, 989, 990, 991, 992, 996, 997, 998, 1007, 1011, 1014, 1016, 1025, 1035, 1035, 1035, 1037, 1039, 1039, 1039, 1044, 1044, 1044, 1044, 1049, 1050, 1050, 1050, 1050, 1055, 1059, 1064, 1068, 1068, 1068, 1072, 1076, 1077, 1082, 1089, 1095, 1101, 1107, 1107, 1119, 1119, 1131, 1137, 1137, 1149, 1161, 1173, 1185, 1185, 1197, 1209, 1221, 1233, 1245, 1257, 1257, 1257, 1263, 1263, 1269, 1272, 1274, 1283, 1293, 1293, 1293, 1295, 1297, 1297, 1297, 1302, 1302, 1302, 1302, 1307, 1308, 1308, 1308, 1308, 1313, 1317, 1322, 1326, 1326, 1326, 1330, 1334, 1335, 1340, 1347, 1353, 1359, 1365, 1365, 1377, 1377, 1389, 1395, 1395, 1407, 1419, 1431, 1443, 1443, 1455, 1467, 1479, 1491, 1503, 1515, 1515, 1515, 1521, 1521, 1529, 1533, 1536, 1541, 1545, 1550, 1553, 1555, 1564, 1568, 1576, 1580, 1583, 1585, 1594, 1601, 1605, 1609, 1613, 1615, 1617, 1626, 1635, 1644, 1698, 1702, 1702, 1705, 1706, 1707, 1729, 1731, 1740, 1741, 1742, 1743, 1744, 1745, 1747, 1748, 1751, 1752, 1754, 1766, 1779, 1792, 1805, 1818, 1831, 1844, 1845, 1846, 1858, 1870, 1885, 1898, 1911, 1924, 1937, 1950, 1963, 1976, 1988, 2000, 2013, 2026, 2039, 2052, 2065, 2079, 2092, 2105, 2118, 2131, 2145, 2158, 2171, 2184, 2197, 2210, 2223, 2237, 2250, 2263, 2276, 2289, 2303, 2316, 2329, 2342, 2355, 2368, 2380, 2394, 2407, 2421, 2434, 2448, 2461, 2474, 2488, 2501, 2514, 2528, 2541, 2554, 2567, 2580, 2595, 2608, 2621, 2634, 2647, 2662, 2675, 2688, 2701, 2715, 2728, 2741, 2755, 2768, 2781, 2794, 2808, 2821, 2834, 2849, 2862, 2875, 2888, 2901, 2915, 2928, 2941, 2954, 2955, 2973, 2977, 2978, 2979, 2991, 2992, 2992, 3025, 3029, 3029, 3032, 3033, 3034, 3035, 3036, 3037, 3039, 3040, 3043, 3044, 3046, 3057, 3058, 3058, 3059, 3060, 3071, 3072, 3105, 3141, 3149, 3156, 3161, 3161, 3167, 3173, 3174, 3175, 3176, 3180, 3180, 3192, 3192, 3198, 3198, 3199, 3200, 3200, 3206, 3207, 3208, 3209, 3213, 3214, 3250, 3251, 3252, 3253, 3254, 3272, 3288, 3288, 3300, 3313, 3314, 3325, 3329, 3330, 3331, 3332, 3332, 3333, 3333, 3355, 3359, 3359, 3360, 3361, 3370, 3371, 3371, 3381, 3391, 3401, 3411, 3421, 3431, 3441, 3452, 3462, 3472, 3482, 3492, 3502, 3512, 3522, 3532, 3589, 3593, 3593, 3595, 3596, 3597, 3601, 3608, 3610, 3610, 3612, 3613, 3622, 3630, 3640, 3641, 3642, 3645, 3671, 3674, 3676, 3685, 3686, 3687, 3688, 3690, 3691, 3692, 3694, 3706, 3707, 3707, 3710, 3712, 3712, 3712, 3712, 3712, 3713, 3714, 3716, 3717, 3720, 3722, 3730, 3739, 3752, 3754, 3754, 3757, 3758, 3758, 3758, 3758, 3772, 3786, 3786, 3787, 3800, 3813, 3829, 3843, 3857, 3871, 3885, 3899, 3913, 3927, 3940, 3953, 3967, 3981, 3995, 4009, 4023, 4038, 4052, 4066, 4080, 4094, 4109, 4123, 4137, 4151, 4165, 4179, 4193, 4208, 4222, 4236, 4250, 4264, 4279, 4293, 4308, 4322, 4337, 4352, 4366, 4380, 4395, 4409, 4423, 4438, 4452, 4466, 4480, 4494, 4510, 4524, 4538, 4552, 4566, 4582, 4596, 4610, 4624, 4638, 4653, 4667, 4681, 4696, 4710, 4724, 4738, 4753, 4767, 4781, 4795, 4811, 4825, 4839, 4853, 4867, 4881, 4895, 4909, 4924, 4938, 4952, 4966, 4980, 4980, 4982, 4991, 4995, 4995, 4996, 4997, 4998, 4998, 5018, 5022, 5022, 5023, 5024, 5036, 5037, 5037, 5104, 5108, 5108, 5110, 5111, 5112, 5134, 5136, 5145, 5146, 5149, 5149, 5149, 5151, 5153, 5154, 5155, 5168, 5173, 5178, 5183, 5188, 5190, 5191, 5191, 5193, 5194, 5194, 5194, 5199, 5204, 5209, 5214, 5219, 5228, 5237, 5246, 5251, 5256, 5257, 5259, 5260, 5263, 5264, 5266, 5276, 5286, 5286, 5297, 5308, 5319, 5330, 5341, 5352, 5352, 5353, 5353, 5362, 5371, 5383, 5393, 5403, 5413, 5423, 5433, 5443, 5453, 5462, 5471, 5481, 5491, 5501, 5511, 5521, 5532, 5542, 5552, 5562, 5572, 5583, 5593, 5603, 5613, 5623, 5633, 5643, 5654, 5664, 5674, 5684, 5694, 5704, 5715, 5725, 5735, 5745, 5755, 5765, 5775, 5786, 5796, 5807, 5817, 5828, 5838, 5848, 5859, 5869, 5879, 5889, 5899, 5910, 5920, 5930, 5940, 5950, 5962, 5972, 5982, 5992, 6002, 6012, 6024, 6034, 6044, 6054, 6064, 6075, 6085, 6095, 6105, 6116, 6126, 6136, 6146, 6156, 6166, 6177, 6187, 6197, 6207, 6219, 6229, 6239, 6249, 6259, 6269, 6279, 6289, 6299, 6310, 6320, 6330, 6340, 6350, 6360, 6370, 6372, 6372, 6378, 6384, 0 , 0 ];
static _lexer_trans_keys: [u8 ; 6387] = [ 101, 103, 105, 110, 69, 78, 68, 95, 95, 0, 4, 10, 26, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 64, 96, 0, 47, 58, 63, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 26, 45, 0, 4, 10, 26, 77, 0, 4, 26, 77, 0, 4, 26, 63, 92, 0, 4, 10, 26, 0, 4, 26, 0, 4, 26, 45, 0, 4, 10, 26, 67, 92, 99, 0, 4, 26, 67, 99, 45, 0, 4, 26, 63, 92, 0, 4, 10, 26, 77, 0, 4, 26, 48, 57, 65, 70, 97, 102, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 64, 96, 0, 47, 58, 63, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 26, 45, 0, 4, 10, 26, 77, 0, 4, 26, 77, 0, 4, 26, 63, 92, 0, 4, 10, 26, 0, 4, 26, 0, 4, 26, 45, 0, 4, 10, 26, 67, 92, 99, 0, 4, 26, 67, 99, 45, 0, 4, 26, 63, 92, 0, 4, 10, 26, 77, 0, 4, 26, 48, 57, 65, 70, 97, 102, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 64, 96, 0, 47, 58, 63, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 64, 96, 0, 47, 58, 63, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 64, 96, 0, 47, 58, 63, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 26, 58, 58, 33, 58, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 60, 62, 33, 58, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 58, 10, 9, 32, 37, 38, 40, 42, 43, 44, 45, 46, 47, 58, 60, 61, 62, 63, 91, 92, 93, 94, 96, 105, 114, 117, 119, 123, 124, 126, 0, 10, 11, 13, 14, 64, 125, 127, 9, 32, 37, 38, 40, 42, 43, 44, 45, 46, 47, 58, 60, 61, 62, 63, 91, 92, 93, 94, 96, 105, 114, 117, 119, 123, 124, 126, 0, 10, 11, 13, 14, 64, 125, 127, 33, 58, 63, 96, 102, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 101, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 115, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 99, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 117, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 101, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 110, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 108, 116, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 101, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 115, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 115, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 105, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 108, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 104, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 105, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 108, 0, 47, 59, 64, 91, 94, 123, 127, 115, 99, 117, 101, 108, 116, 101, 115, 115, 105, 108, 105, 108, 9, 32, 40, 92, 96, 100, 0, 10, 11, 13, 14, 64, 91, 94, 123, 127, 58, 10, 9, 32, 40, 92, 96, 100, 0, 10, 11, 13, 14, 64, 91, 94, 123, 127, 0, 4, 26, 65, 90, 97, 122, 61, 10, 32, 35, 92, 9, 13, 48, 57, 10, 32, 35, 92, 9, 13, 48, 57, 10, 32, 35, 92, 9, 13, 48, 57, 10, 32, 35, 92, 9, 13, 48, 57, 10, 32, 35, 92, 9, 13, 48, 57, 10, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 61, 62, 126, 64, 96, 0, 63, 91, 94, 123, 127, 96, 0, 64, 91, 94, 123, 127, 93, 96, 0, 64, 91, 94, 123, 127, 58, 33, 58, 61, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 71, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 73, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 78, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 68, 96, 0, 47, 59, 64, 91, 94, 123, 127, 58, 58, 33, 58, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 99, 117, 101, 96, 0, 47, 58, 64, 91, 94, 123, 127, 58, 9, 32, 38, 46, 11, 13, 46, 0, 4, 10, 26, 32, 35, 61, 92, 95, 9, 13, 9, 32, 11, 13, 10, 10, 98, 10, 32, 9, 13, 10, 95, 0, 4, 10, 26, 32, 35, 92, 9, 13, 9, 32, 11, 13, 36, 64, 123, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 26, 67, 77, 99, 117, 120, 48, 55, 48, 55, 48, 55, 0, 4, 26, 63, 92, 0, 4, 26, 63, 92, 45, 0, 4, 26, 63, 92, 0, 4, 26, 45, 0, 4, 26, 63, 92, 0, 4, 26, 92, 0, 4, 26, 92, 0, 4, 26, 45, 10, 0, 4, 26, 63, 92, 123, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 0, 4, 10, 26, 35, 92, 36, 64, 123, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 26, 67, 77, 99, 117, 120, 48, 55, 48, 55, 48, 55, 0, 4, 26, 63, 92, 0, 4, 26, 63, 92, 45, 0, 4, 26, 63, 92, 0, 4, 26, 45, 0, 4, 26, 63, 92, 0, 4, 26, 92, 0, 4, 26, 92, 0, 4, 26, 45, 10, 0, 4, 26, 63, 92, 123, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 0, 4, 10, 26, 32, 92, 9, 13, 9, 32, 11, 13, 0, 4, 26, 0, 4, 10, 26, 92, 0, 4, 10, 26, 0, 4, 10, 26, 35, 36, 64, 123, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 10, 26, 0, 4, 10, 26, 32, 35, 9, 13, 9, 32, 11, 13, 36, 64, 123, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 10, 26, 32, 9, 13, 9, 32, 11, 13, 65, 90, 97, 122, 65, 90, 97, 122, 36, 64, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 10, 26, 32, 33, 35, 36, 37, 38, 42, 43, 45, 47, 58, 60, 61, 62, 66, 69, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 105, 109, 110, 111, 114, 115, 116, 117, 119, 121, 124, 126, 1, 8, 9, 13, 14, 64, 65, 90, 94, 96, 123, 127, 9, 32, 11, 13, 61, 64, 126, 10, 10, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 115, 38, 42, 64, 58, 60, 61, 62, 61, 62, 126, 61, 61, 62, 33, 61, 63, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 69, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 71, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 73, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 68, 96, 0, 47, 58, 64, 91, 94, 123, 127, 93, 10, 33, 61, 63, 95, 0, 47, 58, 64, 91, 96, 123, 127, 33, 61, 63, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 69, 70, 76, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 67, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 79, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 68, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 73, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 71, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 95, 0, 47, 58, 64, 91, 96, 123, 127, 33, 61, 63, 95, 0, 47, 58, 64, 91, 96, 123, 127, 33, 61, 63, 73, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 76, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 69, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 73, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 108, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 97, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 100, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 103, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 97, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 107, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 97, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 97, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 111, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 102, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 100, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 108, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 102, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 100, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 97, 111, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 102, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 111, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 100, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 105, 111, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 120, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 116, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 100, 115, 116, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 111, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 99, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 114, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 121, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 112, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 104, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 100, 108, 116, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 104, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 124, 0, 4, 9, 26, 32, 35, 92, 96, 1, 10, 11, 13, 14, 64, 91, 94, 123, 127, 9, 32, 11, 13, 10, 10, 33, 58, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 10, 0, 4, 10, 26, 32, 33, 35, 37, 38, 42, 43, 45, 47, 60, 61, 62, 91, 92, 93, 94, 96, 124, 126, 1, 8, 9, 13, 14, 64, 65, 90, 123, 127, 9, 32, 11, 13, 61, 64, 126, 10, 10, 38, 42, 64, 60, 61, 62, 61, 62, 126, 61, 61, 62, 33, 63, 96, 0, 47, 58, 64, 91, 94, 123, 127, 61, 93, 10, 33, 63, 96, 0, 47, 58, 64, 91, 94, 123, 127, 124, 0, 4, 10, 26, 32, 35, 37, 38, 40, 42, 44, 45, 46, 58, 60, 61, 62, 63, 92, 94, 105, 114, 117, 119, 123, 124, 126, 9, 13, 43, 47, 91, 93, 9, 32, 37, 38, 40, 42, 43, 44, 45, 46, 47, 58, 60, 61, 62, 63, 91, 92, 93, 94, 96, 105, 114, 117, 119, 123, 124, 126, 0, 10, 11, 13, 14, 64, 125, 127, 0, 4, 10, 26, 32, 61, 9, 13, 10, 32, 38, 46, 61, 9, 13, 10, 32, 61, 9, 13, 10, 32, 42, 61, 9, 13, 10, 32, 9, 13, 61, 62, 46, 46, 58, 10, 32, 9, 13, 33, 58, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 10, 32, 61, 124, 9, 13, 10, 10, 10, 32, 42, 61, 9, 13, 58, 60, 62, 10, 32, 9, 13, 10, 9, 32, 37, 38, 40, 42, 43, 44, 45, 46, 47, 58, 60, 61, 62, 63, 91, 92, 93, 94, 96, 105, 114, 117, 119, 123, 124, 126, 0, 10, 11, 13, 14, 64, 125, 127, 102, 101, 110, 104, 0, 4, 9, 26, 32, 92, 96, 100, 1, 10, 11, 13, 14, 64, 91, 94, 123, 127, 9, 32, 40, 92, 96, 100, 0, 10, 11, 13, 14, 64, 91, 94, 123, 127, 33, 58, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 111, 0, 47, 59, 64, 91, 94, 123, 127, 10, 0, 4, 9, 26, 32, 35, 92, 100, 123, 11, 13, 9, 32, 11, 13, 10, 10, 10, 111, 0, 4, 10, 26, 32, 35, 92, 96, 105, 114, 117, 119, 1, 8, 9, 13, 14, 64, 91, 94, 123, 127, 9, 32, 11, 13, 10, 10, 96, 0, 47, 58, 64, 91, 94, 123, 127, 10, 96, 102, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 96, 99, 0, 47, 58, 64, 91, 94, 123, 127, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 96, 108, 116, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 96, 104, 0, 47, 58, 64, 91, 94, 123, 127, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 10, 26, 32, 33, 35, 37, 38, 40, 42, 43, 45, 46, 47, 58, 60, 61, 62, 63, 66, 69, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 105, 109, 110, 111, 114, 115, 116, 117, 119, 121, 123, 124, 126, 1, 8, 9, 13, 14, 64, 65, 90, 93, 96, 125, 127, 9, 32, 11, 13, 61, 126, 10, 10, 65, 90, 97, 122, 0, 4, 26, 65, 90, 97, 122, 38, 61, 42, 61, 61, 10, 32, 35, 61, 92, 9, 13, 48, 57, 10, 32, 35, 92, 9, 13, 48, 57, 10, 32, 35, 92, 9, 13, 48, 57, 61, 62, 46, 46, 0, 4, 26, 33, 34, 36, 37, 38, 39, 42, 43, 45, 47, 58, 60, 61, 62, 64, 91, 94, 96, 124, 126, 0, 63, 92, 93, 123, 127, 61, 64, 126, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 38, 42, 64, 60, 61, 62, 61, 61, 62, 33, 61, 63, 96, 0, 47, 58, 64, 91, 94, 123, 127, 61, 61, 62, 126, 61, 62, 124, 64, 60, 61, 62, 61, 62, 126, 61, 62, 0, 4, 26, 95, 65, 90, 97, 122, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 58, 61, 61, 62, 126, 61, 33, 58, 61, 63, 69, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 78, 96, 0, 47, 59, 64, 91, 94, 123, 127, 10, 33, 58, 61, 63, 95, 0, 47, 59, 64, 91, 96, 123, 127, 33, 58, 61, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 69, 70, 76, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 78, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 67, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 79, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 68, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 73, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 78, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 71, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 95, 0, 47, 59, 64, 91, 96, 123, 127, 33, 58, 61, 63, 95, 0, 47, 59, 64, 91, 96, 123, 127, 33, 58, 61, 63, 73, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 76, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 69, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 73, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 78, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 108, 110, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 105, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 97, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 115, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 100, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 101, 114, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 103, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 105, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 110, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 101, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 97, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 107, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 97, 108, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 115, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 101, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 97, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 115, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 101, 111, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 102, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 108, 110, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 115, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 101, 105, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 100, 115, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 117, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 114, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 97, 111, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 108, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 114, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 102, 110, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 111, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 100, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 117, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 108, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 101, 105, 111, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 120, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 116, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 108, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 101, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 100, 115, 116, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 111, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 99, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 117, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 101, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 114, 117, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 121, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 114, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 101, 117, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 108, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 112, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 101, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 104, 114, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 101, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 117, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 110, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 100, 108, 116, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 101, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 101, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 115, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 115, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 105, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 108, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 104, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 101, 105, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 108, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 105, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 101, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 108, 0, 47, 59, 64, 91, 94, 123, 127, 61, 124, 0, 4, 10, 26, 32, 35, 92, 9, 13, 9, 32, 11, 13, 10, 10, 10, 0, 4, 10, 26, 32, 34, 35, 39, 92, 96, 1, 8, 9, 13, 14, 64, 91, 94, 123, 127, 9, 32, 11, 13, 10, 10, 33, 58, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 10, 0, 4, 10, 26, 32, 33, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 58, 59, 60, 61, 62, 63, 64, 66, 69, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 109, 110, 111, 114, 115, 116, 117, 119, 121, 124, 125, 126, 1, 8, 9, 13, 14, 31, 34, 39, 43, 47, 49, 57, 65, 90, 123, 127, 9, 32, 11, 13, 61, 126, 10, 10, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 61, 38, 46, 61, 42, 61, 61, 62, 46, 46, 66, 68, 79, 88, 95, 98, 100, 105, 111, 114, 120, 48, 57, 95, 105, 114, 48, 57, 95, 105, 114, 48, 57, 95, 105, 114, 48, 57, 95, 105, 114, 48, 57, 105, 114, 102, 101, 105, 115, 95, 105, 114, 48, 49, 95, 105, 114, 48, 49, 95, 105, 114, 48, 49, 95, 105, 114, 48, 57, 95, 105, 114, 48, 57, 95, 105, 114, 48, 57, 65, 70, 97, 102, 95, 105, 114, 48, 57, 65, 70, 97, 102, 95, 105, 114, 48, 57, 65, 70, 97, 102, 95, 105, 114, 48, 57, 95, 105, 114, 48, 57, 58, 60, 61, 62, 61, 62, 126, 61, 61, 62, 64, 96, 0, 47, 58, 63, 91, 94, 123, 127, 58, 96, 0, 47, 59, 64, 91, 94, 123, 127, 58, 69, 96, 0, 47, 59, 64, 91, 94, 123, 127, 58, 71, 96, 0, 47, 59, 64, 91, 94, 123, 127, 58, 73, 96, 0, 47, 59, 64, 91, 94, 123, 127, 58, 78, 96, 0, 47, 59, 64, 91, 94, 123, 127, 58, 78, 96, 0, 47, 59, 64, 91, 94, 123, 127, 58, 68, 96, 0, 47, 59, 64, 91, 94, 123, 127, 10, 95, 0, 47, 58, 64, 91, 96, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 69, 70, 76, 96, 0, 47, 58, 64, 91, 94, 123, 127, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 67, 96, 0, 47, 58, 64, 91, 94, 123, 127, 79, 96, 0, 47, 58, 64, 91, 94, 123, 127, 68, 96, 0, 47, 58, 64, 91, 94, 123, 127, 73, 96, 0, 47, 58, 64, 91, 94, 123, 127, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 71, 96, 0, 47, 58, 64, 91, 94, 123, 127, 95, 0, 47, 58, 64, 91, 96, 123, 127, 95, 0, 47, 58, 64, 91, 96, 123, 127, 73, 96, 0, 47, 58, 64, 91, 94, 123, 127, 76, 96, 0, 47, 58, 64, 91, 94, 123, 127, 69, 96, 0, 47, 58, 64, 91, 94, 123, 127, 73, 96, 0, 47, 58, 64, 91, 94, 123, 127, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 96, 108, 110, 0, 47, 58, 64, 91, 94, 123, 127, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 96, 97, 0, 47, 58, 64, 91, 94, 123, 127, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 96, 100, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 114, 0, 47, 58, 64, 91, 94, 123, 127, 96, 103, 0, 47, 58, 64, 91, 94, 123, 127, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 97, 0, 47, 58, 64, 91, 94, 123, 127, 96, 107, 0, 47, 58, 64, 91, 94, 123, 127, 96, 97, 108, 0, 47, 58, 64, 91, 94, 123, 127, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 97, 0, 47, 58, 64, 91, 94, 123, 127, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 111, 0, 47, 58, 64, 91, 94, 123, 127, 96, 102, 0, 47, 58, 64, 91, 94, 123, 127, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 100, 0, 47, 58, 64, 91, 94, 123, 127, 63, 96, 0, 47, 58, 64, 91, 94, 123, 127, 96, 108, 110, 0, 47, 58, 64, 91, 94, 123, 127, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 105, 0, 47, 58, 64, 91, 94, 123, 127, 96, 102, 0, 47, 58, 64, 91, 94, 123, 127, 96, 100, 115, 0, 47, 58, 64, 91, 94, 123, 127, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 96, 114, 0, 47, 58, 64, 91, 94, 123, 127, 96, 97, 111, 0, 47, 58, 64, 91, 94, 123, 127, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 114, 0, 47, 58, 64, 91, 94, 123, 127, 96, 102, 110, 0, 47, 58, 64, 91, 94, 123, 127, 96, 111, 0, 47, 58, 64, 91, 94, 123, 127, 96, 100, 0, 47, 58, 64, 91, 94, 123, 127, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 105, 111, 0, 47, 58, 64, 91, 94, 123, 127, 96, 120, 0, 47, 58, 64, 91, 94, 123, 127, 96, 116, 0, 47, 58, 64, 91, 94, 123, 127, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 96, 116, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 100, 115, 116, 0, 47, 58, 64, 91, 94, 123, 127, 96, 111, 0, 47, 58, 64, 91, 94, 123, 127, 96, 99, 0, 47, 58, 64, 91, 94, 123, 127, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 114, 117, 0, 47, 58, 64, 91, 94, 123, 127, 96, 121, 0, 47, 58, 64, 91, 94, 123, 127, 96, 114, 0, 47, 58, 64, 91, 94, 123, 127, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 117, 0, 47, 58, 64, 91, 94, 123, 127, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 96, 102, 0, 47, 58, 64, 91, 94, 123, 127, 96, 112, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 114, 0, 47, 58, 64, 91, 94, 123, 127, 96, 104, 114, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 96, 100, 108, 116, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 102, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 96, 104, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 105, 0, 47, 58, 64, 91, 94, 123, 127, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 96, 100, 0, 47, 58, 64, 91, 94, 123, 127, 61, 124, 9, 32, 38, 46, 11, 13, 9, 32, 38, 46, 11, 13, 46, 0 , 0 ];
static _lexer_single_lengths: [i8 ; 812] = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 6, 1, 2, 1, 4, 5, 4, 5, 4, 3, 4, 7, 3, 2, 1, 5, 5, 3, 6, 1, 2, 1, 4, 5, 4, 5, 4, 3, 4, 7, 3, 2, 1, 5, 5, 3, 6, 1, 2, 1, 6, 1, 2, 1, 6, 1, 2, 1, 1, 3, 1, 1, 4, 1, 1, 4, 1, 1, 28, 28, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 6, 3, 1, 4, 4, 4, 4, 4, 1, 6, 1, 3, 2, 1, 1, 1, 1, 5, 6, 6, 6, 6, 1, 1, 4, 1, 1, 1, 1, 1, 1, 4, 1, 9, 2, 0, 1, 1, 1, 2, 1, 1, 7, 2, 3, 0, 1, 8, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 1, 0, 0, 0, 5, 4, 5, 4, 0, 0, 4, 4, 1, 5, 1, 0, 0, 0, 0, 6, 0, 6, 6, 0, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 6, 3, 0, 1, 8, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 1, 0, 0, 0, 5, 4, 5, 4, 0, 0, 4, 4, 1, 5, 1, 0, 0, 0, 0, 6, 0, 6, 6, 0, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 6, 2, 3, 5, 4, 5, 3, 0, 1, 4, 6, 2, 3, 0, 1, 5, 2, 0, 0, 2, 0, 1, 1, 1, 42, 2, 0, 3, 1, 1, 6, 0, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 0, 4, 5, 5, 5, 5, 5, 5, 1, 1, 4, 4, 7, 5, 5, 5, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 4, 6, 5, 6, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 7, 5, 5, 5, 5, 7, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 6, 5, 5, 7, 5, 5, 5, 5, 6, 5, 5, 5, 1, 8, 2, 1, 1, 4, 1, 0, 23, 2, 0, 3, 1, 1, 1, 1, 1, 2, 1, 3, 1, 0, 3, 1, 0, 1, 1, 3, 1, 27, 28, 6, 5, 3, 0, 4, 2, 1, 1, 1, 2, 0, 4, 0, 4, 0, 1, 1, 0, 4, 1, 1, 1, 2, 1, 28, 1, 1, 1, 1, 8, 6, 0, 4, 5, 1, 9, 2, 1, 1, 1, 0, 1, 0, 12, 2, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 45, 2, 0, 2, 1, 1, 0, 3, 2, 0, 2, 1, 5, 4, 4, 1, 1, 3, 20, 3, 0, 1, 1, 1, 1, 2, 1, 1, 0, 4, 1, 0, 3, 2, 0, 0, 0, 0, 1, 1, 2, 1, 3, 2, 4, 1, 5, 2, 0, 3, 1, 0, 0, 0, 6, 6, 0, 1, 5, 5, 8, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 7, 6, 7, 7, 6, 6, 7, 6, 6, 7, 6, 6, 6, 6, 8, 6, 6, 6, 6, 8, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 0, 2, 7, 2, 0, 1, 1, 1, 0, 10, 2, 0, 1, 1, 4, 1, 0, 51, 2, 0, 2, 1, 1, 6, 0, 1, 1, 3, 0, 0, 2, 2, 1, 1, 11, 3, 3, 3, 3, 2, 1, 0, 2, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 1, 3, 1, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 1, 0, 1, 1, 4, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 3, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 1, 0 , 0 ];
static _lexer_range_lengths: [i8 ; 812] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 4, 4, 4, 8, 4, 4, 4, 8, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 2, 0, 2, 2, 2, 2, 2, 0, 8, 4, 0, 3, 3, 0, 3, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 4, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 4, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 3, 0, 3, 0, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 1, 4, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 3, 0, 3, 0, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 3, 0, 1, 1, 0, 0, 0, 0, 0, 1, 4, 0, 1, 1, 0, 1, 4, 1, 1, 2, 2, 0, 1, 4, 4, 4, 6, 1, 0, 0, 0, 0, 8, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 5, 1, 0, 0, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 4, 0, 3, 4, 1, 1, 1, 0, 1, 2, 0, 0, 0, 1, 0, 4, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 5, 5, 0, 4, 4, 0, 1, 1, 0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 3, 0, 1, 4, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 0, 0, 0, 0, 0, 5, 1, 0, 0, 0, 4, 0, 0, 8, 1, 0, 0, 0, 0, 8, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 0, 0 , 0 ];
static _lexer_index_offsets: [i16 ; 812] = [ 0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 23, 38, 44, 51, 57, 62, 68, 73, 79, 84, 88, 93, 101, 105, 108, 110, 116, 122, 129, 144, 150, 157, 163, 168, 174, 179, 185, 190, 194, 199, 207, 211, 214, 216, 222, 228, 235, 250, 256, 263, 269, 284, 290, 297, 303, 318, 324, 331, 337, 343, 347, 349, 351, 360, 362, 364, 373, 375, 377, 410, 443, 453, 463, 473, 483, 493, 503, 513, 524, 534, 544, 554, 564, 574, 584, 594, 604, 606, 608, 610, 612, 615, 617, 619, 621, 623, 625, 627, 629, 641, 643, 645, 657, 663, 665, 672, 679, 686, 693, 700, 702, 717, 723, 727, 733, 738, 740, 745, 747, 757, 768, 779, 790, 801, 803, 805, 814, 820, 822, 824, 826, 832, 834, 840, 842, 853, 857, 858, 860, 862, 864, 868, 870, 872, 881, 885, 889, 891, 897, 907, 908, 909, 911, 913, 914, 915, 921, 922, 923, 924, 930, 932, 933, 934, 935, 941, 946, 952, 957, 958, 959, 964, 969, 971, 977, 982, 986, 990, 994, 995, 1005, 1006, 1016, 1023, 1024, 1034, 1044, 1054, 1064, 1065, 1075, 1085, 1095, 1105, 1115, 1125, 1126, 1127, 1131, 1132, 1139, 1143, 1145, 1151, 1161, 1162, 1163, 1165, 1167, 1168, 1169, 1175, 1176, 1177, 1178, 1184, 1186, 1187, 1188, 1189, 1195, 1200, 1206, 1211, 1212, 1213, 1218, 1223, 1225, 1231, 1236, 1240, 1244, 1248, 1249, 1259, 1260, 1270, 1277, 1278, 1288, 1298, 1308, 1318, 1319, 1329, 1339, 1349, 1359, 1369, 1379, 1380, 1381, 1385, 1386, 1394, 1398, 1402, 1408, 1413, 1419, 1423, 1425, 1431, 1436, 1444, 1448, 1452, 1454, 1460, 1467, 1471, 1474, 1477, 1480, 1482, 1488, 1494, 1500, 1549, 1553, 1554, 1558, 1560, 1562, 1577, 1579, 1585, 1587, 1589, 1591, 1593, 1595, 1598, 1600, 1604, 1606, 1608, 1617, 1627, 1637, 1647, 1657, 1667, 1677, 1679, 1681, 1690, 1699, 1711, 1721, 1731, 1741, 1751, 1761, 1771, 1781, 1790, 1799, 1809, 1819, 1829, 1839, 1849, 1860, 1870, 1880, 1890, 1900, 1911, 1921, 1931, 1941, 1951, 1961, 1971, 1982, 1992, 2002, 2012, 2022, 2033, 2043, 2053, 2063, 2073, 2083, 2092, 2103, 2113, 2124, 2134, 2145, 2155, 2165, 2176, 2186, 2196, 2207, 2217, 2227, 2237, 2247, 2259, 2269, 2279, 2289, 2299, 2311, 2321, 2331, 2341, 2352, 2362, 2372, 2383, 2393, 2403, 2413, 2424, 2434, 2444, 2456, 2466, 2476, 2486, 2496, 2507, 2517, 2527, 2537, 2539, 2553, 2557, 2559, 2561, 2570, 2572, 2573, 2602, 2606, 2607, 2611, 2613, 2615, 2617, 2619, 2621, 2624, 2626, 2630, 2632, 2634, 2642, 2644, 2645, 2647, 2649, 2657, 2659, 2690, 2723, 2731, 2738, 2743, 2744, 2750, 2755, 2757, 2759, 2761, 2765, 2766, 2775, 2776, 2782, 2783, 2785, 2787, 2788, 2794, 2796, 2798, 2800, 2804, 2806, 2839, 2841, 2843, 2845, 2847, 2861, 2873, 2874, 2883, 2893, 2895, 2906, 2910, 2912, 2914, 2916, 2917, 2919, 2920, 2938, 2942, 2943, 2945, 2947, 2953, 2955, 2956, 2963, 2970, 2977, 2984, 2991, 2998, 3005, 3013, 3020, 3027, 3034, 3041, 3048, 3055, 3062, 3069, 3121, 3125, 3126, 3129, 3131, 3133, 3136, 3142, 3145, 3146, 3149, 3151, 3159, 3166, 3174, 3176, 3178, 3182, 3206, 3210, 3212, 3218, 3220, 3222, 3224, 3227, 3229, 3231, 3233, 3242, 3244, 3245, 3249, 3252, 3253, 3254, 3255, 3256, 3258, 3260, 3263, 3265, 3269, 3272, 3279, 3285, 3295, 3298, 3299, 3303, 3305, 3306, 3307, 3308, 3319, 3330, 3331, 3333, 3343, 3353, 3366, 3377, 3388, 3399, 3410, 3421, 3432, 3443, 3453, 3463, 3474, 3485, 3496, 3507, 3518, 3530, 3541, 3552, 3563, 3574, 3586, 3597, 3608, 3619, 3630, 3641, 3652, 3664, 3675, 3686, 3697, 3708, 3720, 3731, 3743, 3754, 3766, 3778, 3789, 3800, 3812, 3823, 3834, 3846, 3857, 3868, 3879, 3890, 3903, 3914, 3925, 3936, 3947, 3960, 3971, 3982, 3993, 4004, 4016, 4027, 4038, 4050, 4061, 4072, 4083, 4095, 4106, 4117, 4128, 4141, 4152, 4163, 4174, 4185, 4196, 4207, 4218, 4230, 4241, 4252, 4263, 4274, 4275, 4278, 4287, 4291, 4292, 4294, 4296, 4298, 4299, 4315, 4319, 4320, 4322, 4324, 4333, 4335, 4336, 4396, 4400, 4401, 4404, 4406, 4408, 4423, 4425, 4431, 4433, 4437, 4438, 4439, 4442, 4445, 4447, 4449, 4462, 4467, 4472, 4477, 4482, 4485, 4487, 4488, 4491, 4493, 4494, 4495, 4500, 4505, 4510, 4515, 4520, 4527, 4534, 4541, 4546, 4551, 4553, 4556, 4558, 4562, 4564, 4567, 4574, 4581, 4582, 4590, 4598, 4606, 4614, 4622, 4630, 4631, 4633, 4634, 4640, 4646, 4655, 4662, 4669, 4676, 4683, 4690, 4697, 4704, 4710, 4716, 4723, 4730, 4737, 4744, 4751, 4759, 4766, 4773, 4780, 4787, 4795, 4802, 4809, 4816, 4823, 4830, 4837, 4845, 4852, 4859, 4866, 4873, 4880, 4888, 4895, 4902, 4909, 4916, 4923, 4930, 4938, 4945, 4953, 4960, 4968, 4975, 4982, 4990, 4997, 5004, 5011, 5018, 5026, 5033, 5040, 5047, 5054, 5063, 5070, 5077, 5084, 5091, 5098, 5107, 5114, 5121, 5128, 5135, 5143, 5150, 5157, 5164, 5172, 5179, 5186, 5193, 5200, 5207, 5215, 5222, 5229, 5236, 5245, 5252, 5259, 5266, 5273, 5280, 5287, 5294, 5301, 5309, 5316, 5323, 5330, 5337, 5344, 5351, 5354, 5355, 5361, 5367, 0 , 0 ];
static _lexer_trans_cond_spaces: [i8 ; 6153] = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 0 ];
static _lexer_trans_offsets: [i16 ; 6153] = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464, 3465, 3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3518, 3519, 3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529, 3530, 3531, 3532, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3540, 3541, 3542, 3543, 3544, 3545, 3546, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3585, 3586, 3587, 3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3598, 3599, 3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629, 3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706, 3707, 3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717, 3718, 3719, 3720, 3721, 3722, 3723, 3724, 3725, 3726, 3727, 3728, 3729, 3730, 3731, 3732, 3733, 3734, 3735, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745, 3746, 3747, 3748, 3749, 3750, 3751, 3752, 3753, 3754, 3755, 3756, 3757, 3758, 3759, 3760, 3761, 3762, 3763, 3764, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3781, 3782, 3783, 3784, 3785, 3786, 3787, 3788, 3789, 3790, 3791, 3792, 3793, 3794, 3795, 3796, 3797, 3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805, 3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3816, 3817, 3818, 3819, 3820, 3821, 3822, 3823, 3824, 3825, 3826, 3827, 3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840, 3841, 3842, 3843, 3844, 3845, 3846, 3847, 3848, 3849, 3850, 3851, 3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860, 3861, 3862, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3871, 3872, 3873, 3874, 3875, 3876, 3877, 3878, 3879, 3880, 3881, 3882, 3883, 3884, 3885, 3886, 3887, 3888, 3889, 3890, 3891, 3892, 3893, 3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3904, 3905, 3906, 3907, 3908, 3909, 3910, 3911, 3912, 3913, 3914, 3915, 3916, 3917, 3918, 3919, 3920, 3921, 3922, 3923, 3924, 3925, 3926, 3927, 3928, 3929, 3930, 3931, 3932, 3933, 3934, 3935, 3936, 3937, 3938, 3939, 3940, 3941, 3942, 3943, 3944, 3945, 3946, 3947, 3948, 3949, 3950, 3951, 3952, 3953, 3954, 3955, 3956, 3957, 3958, 3959, 3960, 3961, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973, 3974, 3975, 3976, 3977, 3978, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3998, 3999, 4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4036, 4037, 4038, 4039, 4040, 4041, 4042, 4043, 4044, 4045, 4046, 4047, 4048, 4049, 4050, 4051, 4052, 4053, 4054, 4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4063, 4064, 4065, 4066, 4067, 4068, 4069, 4070, 4071, 4072, 4073, 4074, 4075, 4076, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 4086, 4087, 4088, 4089, 4090, 4091, 4092, 4093, 4094, 4095, 4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4127, 4128, 4129, 4130, 4131, 4132, 4133, 4134, 4135, 4136, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178, 4179, 4180, 4181, 4182, 4183, 4184, 4185, 4186, 4187, 4188, 4189, 4190, 4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 4211, 4212, 4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256, 4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272, 4273, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343, 4344, 4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4353, 4354, 4355, 4356, 4357, 4358, 4359, 4360, 4361, 4362, 4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377, 4378, 4379, 4380, 4381, 4382, 4383, 4384, 4385, 4386, 4387, 4388, 4389, 4390, 4391, 4392, 4393, 4394, 4395, 4396, 4397, 4398, 4399, 4400, 4401, 4402, 4403, 4404, 4405, 4406, 4407, 4408, 4409, 4410, 4411, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4419, 4420, 4421, 4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4432, 4433, 4434, 4435, 4436, 4437, 4438, 4439, 4440, 4441, 4442, 4443, 4444, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4459, 4460, 4461, 4462, 4463, 4464, 4465, 4466, 4467, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4542, 4543, 4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4629, 4630, 4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649, 4650, 4651, 4652, 4653, 4654, 4655, 4656, 4657, 4658, 4659, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4667, 4668, 4669, 4670, 4671, 4672, 4673, 4674, 4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 4684, 4685, 4686, 4687, 4688, 4689, 4690, 4691, 4692, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4700, 4701, 4702, 4703, 4704, 4705, 4706, 4707, 4708, 4709, 4710, 4711, 4712, 4713, 4714, 4715, 4716, 4717, 4718, 4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739, 4740, 4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4761, 4762, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4770, 4771, 4772, 4773, 4774, 4775, 4776, 4777, 4778, 4779, 4780, 4781, 4782, 4783, 4784, 4785, 4786, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4794, 4795, 4796, 4797, 4798, 4799, 4800, 4801, 4802, 4803, 4804, 4805, 4806, 4807, 4808, 4809, 4810, 4811, 4812, 4813, 4814, 4815, 4816, 4817, 4818, 4819, 4820, 4821, 4822, 4823, 4824, 4825, 4826, 4827, 4828, 4829, 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4837, 4838, 4839, 4840, 4841, 4842, 4843, 4844, 4845, 4846, 4847, 4848, 4849, 4850, 4851, 4852, 4853, 4854, 4855, 4856, 4857, 4858, 4859, 4860, 4861, 4862, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894, 4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916, 4917, 4918, 4919, 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4937, 4938, 4939, 4940, 4941, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949, 4950, 4951, 4952, 4953, 4954, 4955, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971, 4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979, 4980, 4981, 4982, 4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991, 4992, 4993, 4994, 4995, 4996, 4997, 4998, 4999, 5000, 5001, 5002, 5003, 5004, 5005, 5006, 5007, 5008, 5009, 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 5024, 5025, 5026, 5027, 5028, 5029, 5030, 5031, 5032, 5033, 5034, 5035, 5036, 5037, 5038, 5039, 5040, 5041, 5042, 5043, 5044, 5045, 5046, 5047, 5048, 5049, 5050, 5051, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 5059, 5060, 5061, 5062, 5063, 5064, 5065, 5066, 5067, 5068, 5069, 5070, 5071, 5072, 5073, 5074, 5075, 5076, 5077, 5078, 5079, 5080, 5081, 5082, 5083, 5084, 5085, 5086, 5087, 5088, 5089, 5090, 5091, 5092, 5093, 5094, 5095, 5096, 5097, 5098, 5099, 5100, 5101, 5102, 5103, 5104, 5105, 5106, 5107, 5108, 5109, 5110, 5111, 5112, 5113, 5114, 5115, 5116, 5117, 5118, 5119, 5120, 5121, 5122, 5123, 5124, 5125, 5126, 5127, 5128, 5129, 5130, 5131, 5132, 5133, 5134, 5135, 5136, 5137, 5138, 5139, 5140, 5141, 5142, 5143, 5144, 5145, 5146, 5147, 5148, 5149, 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5157, 5158, 5159, 5160, 5161, 5162, 5163, 5164, 5165, 5166, 5167, 5168, 5169, 5170, 5171, 5172, 5173, 5174, 5175, 5176, 5177, 5178, 5179, 5180, 5181, 5182, 5183, 5184, 5185, 5186, 5187, 5188, 5189, 5190, 5191, 5192, 5193, 5194, 5195, 5196, 5197, 5198, 5199, 5200, 5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208, 5209, 5210, 5211, 5212, 5213, 5214, 5215, 5216, 5217, 5218, 5219, 5220, 5221, 5222, 5223, 5224, 5225, 5226, 5227, 5228, 5229, 5230, 5231, 5232, 5233, 5234, 5235, 5236, 5237, 5238, 5239, 5240, 5241, 5242, 5243, 5244, 5245, 5246, 5247, 5248, 5249, 5250, 5251, 5252, 5253, 5254, 5255, 5256, 5257, 5258, 5259, 5260, 5261, 5262, 5263, 5264, 5265, 5266, 5267, 5268, 5269, 5270, 5271, 5272, 5273, 5274, 5275, 5276, 5277, 5278, 5279, 5280, 5281, 5282, 5283, 5284, 5285, 5286, 5287, 5288, 5289, 5290, 5291, 5292, 5293, 5294, 5295, 5296, 5297, 5298, 5299, 5300, 5301, 5302, 5303, 5304, 5305, 5306, 5307, 5308, 5309, 5310, 5311, 5312, 5313, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 5321, 5322, 5323, 5324, 5325, 5326, 5327, 5328, 5329, 5330, 5331, 5332, 5333, 5334, 5335, 5336, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5348, 5349, 5350, 5351, 5352, 5353, 5354, 5355, 5356, 5357, 5358, 5359, 5360, 5361, 5362, 5363, 5364, 5365, 5366, 5367, 5368, 5369, 5370, 5371, 5372, 5373, 5374, 5375, 5376, 5377, 5378, 5379, 5380, 5381, 5382, 5383, 5384, 5385, 5386, 5387, 5388, 5389, 5390, 5391, 5392, 5393, 5394, 5395, 5396, 5397, 5398, 5399, 5400, 5401, 5402, 5403, 5404, 5405, 5406, 5407, 5408, 5409, 5410, 5411, 5412, 5413, 5414, 5415, 5416, 5417, 5418, 5419, 5420, 5421, 5422, 5423, 5424, 5425, 5426, 5427, 5428, 5429, 5430, 5431, 5432, 5433, 5434, 5435, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5444, 5445, 5446, 5447, 5448, 5449, 5450, 5451, 5452, 5453, 5454, 5455, 5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5465, 5466, 5467, 5468, 5469, 5470, 5471, 5472, 5473, 5474, 5475, 5476, 5477, 5478, 5479, 5480, 5481, 5482, 5483, 5484, 5485, 5486, 5487, 5488, 5489, 5490, 5491, 5492, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 5500, 5501, 5502, 5503, 5504, 5505, 5506, 5507, 5508, 5509, 5510, 5511, 5512, 5513, 5514, 5515, 5516, 5517, 5518, 5519, 5520, 5521, 5522, 5523, 5524, 5525, 5526, 5527, 5528, 5529, 5530, 5531, 5532, 5533, 5534, 5535, 5536, 5537, 5538, 5539, 5540, 5541, 5542, 5543, 5544, 5545, 5546, 5547, 5548, 5549, 5550, 5551, 5552, 5553, 5554, 5555, 5556, 5557, 5558, 5559, 5560, 5561, 5562, 5563, 5564, 5565, 5566, 5567, 5568, 5569, 5570, 5571, 5572, 5573, 5574, 5575, 5576, 5577, 5578, 5579, 5580, 5581, 5582, 5583, 5584, 5585, 5586, 5587, 5588, 5589, 5590, 5591, 5592, 5593, 5594, 5595, 5596, 5597, 5598, 5599, 5600, 5601, 5602, 5603, 5604, 5605, 5606, 5607, 5608, 5609, 5610, 5611, 5612, 5613, 5614, 5615, 5616, 5617, 5618, 5619, 5620, 5621, 5622, 5623, 5624, 5625, 5626, 5627, 5628, 5629, 5630, 5631, 5632, 5633, 5634, 5635, 5636, 5637, 5638, 5639, 5640, 5641, 5642, 5643, 5644, 5645, 5646, 5647, 5648, 5649, 5650, 5651, 5652, 5653, 5654, 5655, 5656, 5657, 5658, 5659, 5660, 5661, 5662, 5663, 5664, 5665, 5666, 5667, 5668, 5669, 5670, 5671, 5672, 5673, 5674, 5675, 5676, 5677, 5678, 5679, 5680, 5681, 5682, 5683, 5684, 5685, 5686, 5687, 5688, 5689, 5690, 5691, 5692, 5693, 5694, 5695, 5696, 5697, 5698, 5699, 5700, 5701, 5702, 5703, 5704, 5705, 5706, 5707, 5708, 5709, 5710, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719, 5720, 5721, 5722, 5723, 5724, 5725, 5726, 5727, 5728, 5729, 5730, 5731, 5732, 5733, 5734, 5735, 5736, 5737, 5738, 5739, 5740, 5741, 5742, 5743, 5744, 5745, 5746, 5747, 5748, 5749, 5750, 5751, 5752, 5753, 5754, 5755, 5756, 5757, 5758, 5759, 5760, 5761, 5762, 5763, 5764, 5765, 5766, 5767, 5768, 5769, 5770, 5771, 5772, 5773, 5774, 5775, 5776, 5777, 5778, 5779, 5780, 5781, 5782, 5783, 5784, 5785, 5786, 5787, 5788, 5789, 5790, 5791, 5792, 5793, 5794, 5795, 5796, 5797, 5798, 5799, 5800, 5801, 5802, 5803, 5804, 5805, 5806, 5807, 5808, 5809, 5810, 5811, 5812, 5813, 5814, 5815, 5816, 5817, 5818, 5819, 5820, 5821, 5822, 5823, 5824, 5825, 5826, 5827, 5828, 5829, 5830, 5831, 5832, 5833, 5834, 5835, 5836, 5837, 5838, 5839, 5840, 5841, 5842, 5843, 5844, 5845, 5846, 5847, 5848, 5849, 5850, 5851, 5852, 5853, 5854, 5855, 5856, 5857, 5858, 5859, 5860, 5861, 5862, 5863, 5864, 5865, 5866, 5867, 5868, 5869, 5870, 5871, 5872, 5873, 5874, 5875, 5876, 5877, 5878, 5879, 5880, 5881, 5882, 5883, 5884, 5885, 5886, 5887, 5888, 5889, 5890, 5891, 5892, 5893, 5894, 5895, 5896, 5897, 5898, 5899, 5900, 5901, 5902, 5903, 5904, 5905, 5906, 5907, 5908, 5909, 5910, 5911, 5912, 5913, 5914, 5915, 5916, 5917, 5918, 5919, 5920, 5921, 5922, 5923, 5924, 5925, 5926, 5927, 5928, 5929, 5930, 5931, 5932, 5933, 5934, 5935, 5936, 5937, 5938, 5939, 5940, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 5950, 5951, 5952, 5953, 5954, 5955, 5956, 5957, 5958, 5959, 5960, 5961, 5962, 5963, 5964, 5965, 5966, 5967, 5968, 5969, 5970, 5971, 5972, 5973, 5974, 5975, 5976, 5977, 5978, 5979, 5980, 5981, 5982, 5983, 5984, 5985, 5986, 5987, 5988, 5989, 5990, 5991, 5992, 5993, 5994, 5995, 5996, 5997, 5998, 5999, 6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6028, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6036, 6037, 6038, 6039, 6040, 6041, 6042, 6043, 6044, 6045, 6046, 6047, 6048, 6049, 6050, 6051, 6052, 6053, 6054, 6055, 6056, 6057, 6058, 6059, 6060, 6061, 6062, 6063, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081, 6082, 6083, 6084, 6085, 6086, 6087, 6088, 6089, 6090, 6091, 6092, 6093, 6094, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6102, 6103, 6104, 6105, 6106, 6107, 6108, 6109, 6110, 6111, 6112, 6113, 6114, 6115, 6116, 6117, 6118, 6119, 6120, 6121, 6122, 6123, 6124, 6125, 6126, 6127, 6128, 6129, 6130, 6131, 6132, 6133, 6134, 6135, 6136, 6137, 6138, 6139, 6140, 6141, 6142, 6143, 6144, 6145, 6146, 6147, 6148, 6149, 6150, 0 , 0 ];
static _lexer_trans_lengths: [i8 ; 6153] = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 0 ];
static _lexer_cond_keys: [i8 ; 6153] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _lexer_cond_targs: [i16 ; 6153] = [ 2, 135, 3, 135, 4, 135, 141, 135, 6, 135, 7, 135, 8, 135, 9, 135, 10, 135, 135, 135, 135, 135, 135, 144, 144, 12, 144, 144, 144, 144, 144, 144, 144, 147, 144, 144, 144, 148, 144, 144, 144, 144, 144, 144, 14, 144, 144, 144, 144, 144, 148, 144, 144, 144, 144, 144, 148, 144, 144, 144, 156, 155, 144, 144, 160, 144, 166, 159, 144, 144, 144, 161, 159, 144, 144, 144, 163, 19, 162, 144, 144, 165, 144, 164, 144, 144, 144, 164, 144, 144, 144, 168, 155, 144, 144, 171, 144, 172, 173, 174, 170, 144, 144, 144, 170, 25, 18, 144, 18, 144, 144, 144, 144, 158, 27, 157, 144, 144, 160, 144, 161, 159, 144, 144, 144, 198, 198, 198, 197, 200, 200, 30, 200, 200, 200, 200, 200, 200, 200, 202, 200, 200, 200, 203, 200, 200, 200, 200, 200, 200, 32, 200, 200, 200, 200, 200, 203, 200, 200, 200, 200, 200, 203, 200, 200, 200, 211, 210, 200, 200, 215, 200, 221, 214, 200, 200, 200, 216, 214, 200, 200, 200, 218, 37, 217, 200, 200, 220, 200, 219, 200, 200, 200, 219, 200, 200, 200, 223, 210, 200, 200, 226, 200, 227, 228, 229, 225, 200, 200, 200, 225, 43, 36, 200, 36, 200, 200, 200, 200, 213, 45, 212, 200, 200, 215, 200, 216, 214, 200, 200, 200, 253, 253, 253, 252, 260, 260, 48, 260, 260, 260, 260, 260, 260, 260, 262, 260, 260, 260, 263, 260, 260, 260, 260, 260, 260, 50, 260, 260, 260, 260, 260, 263, 260, 260, 260, 260, 260, 263, 265, 265, 52, 265, 265, 265, 265, 265, 265, 265, 268, 265, 265, 265, 269, 265, 265, 265, 265, 265, 265, 54, 265, 265, 265, 265, 265, 269, 265, 265, 265, 265, 265, 269, 0, 0, 56, 274, 274, 274, 0, 274, 0, 274, 275, 274, 0, 0, 276, 0, 0, 0, 0, 0, 274, 58, 0, 0, 0, 0, 0, 277, 0, 0, 0, 0, 0, 278, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 62, 392, 392, 392, 61, 62, 61, 392, 392, 392, 392, 392, 63, 424, 420, 424, 420, 67, 420, 67, 420, 420, 420, 420, 420, 66, 420, 420, 69, 420, 70, 70, 422, 423, 425, 426, 424, 420, 427, 428, 422, 430, 64, 420, 65, 431, 432, 68, 420, 424, 420, 71, 72, 77, 84, 434, 435, 424, 420, 70, 420, 420, 66, 70, 70, 422, 423, 425, 426, 424, 420, 427, 428, 422, 430, 64, 420, 65, 431, 432, 68, 420, 424, 420, 71, 72, 77, 84, 434, 435, 424, 420, 70, 420, 420, 66, 67, 420, 67, 420, 433, 420, 420, 420, 420, 66, 67, 420, 67, 420, 73, 420, 420, 420, 420, 66, 67, 420, 67, 420, 74, 420, 420, 420, 420, 66, 67, 420, 67, 420, 75, 420, 420, 420, 420, 66, 67, 420, 67, 420, 76, 420, 420, 420, 420, 66, 67, 420, 67, 420, 433, 420, 420, 420, 420, 66, 67, 420, 67, 420, 78, 420, 420, 420, 420, 66, 67, 420, 67, 420, 79, 82, 420, 420, 420, 420, 66, 67, 420, 67, 420, 80, 420, 420, 420, 420, 66, 67, 420, 67, 420, 81, 420, 420, 420, 420, 66, 67, 420, 67, 420, 433, 420, 420, 420, 420, 66, 67, 420, 67, 420, 83, 420, 420, 420, 420, 66, 67, 420, 67, 420, 433, 420, 420, 420, 420, 66, 67, 420, 67, 420, 85, 420, 420, 420, 420, 66, 67, 420, 67, 420, 86, 420, 420, 420, 420, 66, 67, 420, 67, 420, 76, 420, 420, 420, 420, 66, 88, 420, 89, 420, 90, 420, 420, 420, 92, 95, 420, 93, 420, 94, 420, 420, 420, 96, 420, 420, 420, 98, 420, 90, 420, 99, 99, 453, 101, 451, 455, 451, 99, 451, 451, 451, 454, 451, 451, 102, 451, 99, 99, 453, 101, 451, 455, 451, 99, 451, 451, 451, 454, 489, 489, 489, 496, 496, 489, 489, 489, 106, 105, 107, 110, 105, 489, 489, 106, 105, 107, 110, 105, 489, 489, 106, 108, 107, 109, 108, 502, 108, 106, 108, 107, 109, 108, 502, 108, 106, 108, 107, 109, 108, 502, 108, 106, 489, 489, 489, 112, 489, 489, 489, 489, 489, 489, 489, 509, 489, 489, 489, 510, 489, 489, 489, 489, 489, 489, 516, 489, 489, 489, 115, 489, 489, 489, 489, 510, 489, 489, 489, 489, 510, 516, 489, 489, 489, 489, 489, 534, 489, 489, 536, 118, 538, 536, 489, 489, 489, 489, 489, 119, 536, 118, 538, 536, 121, 489, 489, 489, 489, 489, 119, 536, 118, 538, 536, 122, 489, 489, 489, 489, 489, 119, 536, 118, 538, 536, 535, 489, 489, 489, 489, 489, 119, 536, 118, 538, 536, 535, 489, 489, 489, 489, 489, 119, 125, 640, 640, 640, 124, 125, 124, 640, 640, 640, 640, 640, 126, 648, 648, 648, 648, 648, 648, 129, 648, 130, 648, 675, 648, 648, 648, 648, 648, 648, 656, 695, 648, 133, 133, 134, 807, 133, 807, 807, 807, 135, 135, 137, 135, 136, 138, 140, 142, 143, 136, 135, 136, 136, 136, 135, 135, 135, 139, 135, 139, 1, 135, 135, 135, 135, 135, 137, 135, 5, 135, 144, 144, 144, 144, 145, 146, 149, 145, 144, 145, 145, 145, 144, 11, 13, 144, 144, 147, 144, 144, 144, 144, 144, 144, 148, 150, 150, 150, 15, 21, 26, 175, 28, 152, 151, 144, 144, 153, 144, 154, 144, 144, 144, 144, 144, 144, 158, 16, 157, 144, 144, 144, 144, 144, 144, 158, 17, 157, 18, 144, 144, 144, 144, 144, 144, 144, 163, 20, 162, 144, 144, 144, 167, 155, 144, 144, 144, 163, 19, 162, 144, 144, 144, 22, 169, 144, 144, 144, 144, 144, 23, 169, 144, 144, 144, 167, 155, 24, 144, 144, 144, 144, 163, 19, 162, 180, 176, 176, 176, 144, 177, 177, 177, 144, 178, 178, 178, 144, 179, 179, 179, 144, 144, 181, 181, 185, 181, 185, 196, 187, 187, 187, 182, 144, 181, 181, 144, 181, 144, 184, 183, 183, 183, 182, 181, 181, 144, 181, 144, 144, 183, 144, 181, 181, 185, 181, 185, 144, 187, 187, 187, 186, 181, 181, 144, 181, 144, 181, 183, 183, 183, 186, 181, 181, 188, 181, 188, 189, 190, 190, 190, 186, 181, 181, 188, 181, 188, 189, 187, 187, 187, 186, 144, 181, 181, 188, 181, 188, 189, 191, 191, 191, 186, 181, 181, 188, 181, 188, 189, 192, 192, 192, 186, 181, 181, 188, 181, 188, 189, 193, 193, 193, 186, 181, 181, 188, 181, 188, 189, 194, 194, 194, 186, 181, 181, 188, 181, 188, 189, 195, 195, 195, 186, 181, 181, 144, 181, 144, 144, 195, 195, 195, 186, 144, 144, 199, 199, 199, 144, 144, 200, 200, 200, 200, 201, 204, 200, 29, 31, 200, 200, 202, 200, 200, 200, 200, 200, 200, 203, 205, 205, 205, 33, 39, 44, 230, 46, 207, 206, 200, 200, 208, 200, 209, 200, 200, 200, 200, 200, 200, 213, 34, 212, 200, 200, 200, 200, 200, 200, 213, 35, 212, 36, 200, 200, 200, 200, 200, 200, 200, 218, 38, 217, 200, 200, 200, 222, 210, 200, 200, 200, 218, 37, 217, 200, 200, 200, 40, 224, 200, 200, 200, 200, 200, 41, 224, 200, 200, 200, 222, 210, 42, 200, 200, 200, 200, 218, 37, 217, 235, 231, 231, 231, 200, 232, 232, 232, 200, 233, 233, 233, 200, 234, 234, 234, 200, 200, 236, 236, 240, 236, 240, 251, 242, 242, 242, 237, 200, 236, 236, 200, 236, 200, 239, 238, 238, 238, 237, 236, 236, 200, 236, 200, 200, 238, 200, 236, 236, 240, 236, 240, 200, 242, 242, 242, 241, 236, 236, 200, 236, 200, 236, 238, 238, 238, 241, 236, 236, 243, 236, 243, 244, 245, 245, 245, 241, 236, 236, 243, 236, 243, 244, 242, 242, 242, 241, 200, 236, 236, 243, 236, 243, 244, 246, 246, 246, 241, 236, 236, 243, 236, 243, 244, 247, 247, 247, 241, 236, 236, 243, 236, 243, 244, 248, 248, 248, 241, 236, 236, 243, 236, 243, 244, 249, 249, 249, 241, 236, 236, 243, 236, 243, 244, 250, 250, 250, 241, 236, 236, 200, 236, 200, 200, 250, 250, 250, 241, 200, 200, 254, 254, 254, 200, 200, 255, 255, 255, 255, 256, 257, 256, 255, 256, 256, 256, 255, 255, 255, 255, 255, 258, 258, 258, 258, 259, 258, 258, 258, 258, 258, 258, 260, 260, 260, 260, 261, 260, 47, 49, 260, 260, 262, 260, 260, 260, 260, 260, 260, 263, 264, 264, 264, 264, 264, 265, 265, 265, 265, 266, 267, 266, 265, 266, 266, 266, 265, 51, 53, 265, 265, 268, 265, 265, 265, 265, 265, 265, 269, 270, 270, 270, 270, 271, 271, 270, 271, 271, 271, 270, 273, 273, 272, 273, 273, 272, 55, 57, 0, 275, 274, 274, 274, 274, 274, 274, 276, 274, 274, 274, 274, 274, 277, 274, 274, 274, 274, 274, 278, 279, 279, 281, 279, 280, 282, 283, 285, 288, 289, 290, 291, 291, 279, 292, 293, 295, 297, 299, 303, 305, 306, 279, 307, 324, 329, 336, 341, 348, 355, 358, 359, 363, 357, 367, 375, 379, 381, 386, 388, 391, 291, 279, 280, 279, 298, 279, 279, 308, 280, 280, 280, 279, 279, 279, 279, 279, 279, 279, 284, 279, 284, 279, 279, 59, 279, 279, 279, 279, 279, 279, 279, 286, 279, 279, 279, 287, 286, 279, 279, 279, 279, 279, 279, 287, 60, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 294, 279, 279, 279, 296, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 298, 279, 279, 279, 300, 279, 279, 279, 279, 279, 298, 279, 279, 279, 301, 279, 279, 279, 279, 279, 298, 279, 279, 279, 302, 279, 279, 279, 279, 279, 298, 279, 279, 279, 298, 279, 279, 279, 279, 279, 298, 279, 279, 279, 304, 279, 279, 279, 279, 279, 298, 279, 279, 279, 298, 279, 279, 279, 279, 279, 298, 296, 279, 281, 279, 279, 279, 279, 309, 279, 279, 279, 279, 308, 279, 279, 279, 279, 279, 279, 279, 279, 308, 279, 279, 279, 310, 319, 322, 279, 279, 279, 279, 279, 308, 279, 279, 279, 311, 279, 279, 279, 279, 279, 308, 279, 279, 279, 312, 279, 279, 279, 279, 279, 308, 279, 279, 279, 313, 279, 279, 279, 279, 279, 308, 279, 279, 279, 314, 279, 279, 279, 279, 279, 308, 279, 279, 279, 315, 279, 279, 279, 279, 279, 308, 279, 279, 279, 316, 279, 279, 279, 279, 279, 308, 279, 279, 279, 317, 279, 279, 279, 279, 279, 308, 279, 279, 279, 318, 279, 279, 279, 279, 308, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 320, 279, 279, 279, 279, 279, 308, 279, 279, 279, 321, 279, 279, 279, 279, 279, 308, 279, 279, 279, 317, 279, 279, 279, 279, 279, 308, 279, 279, 279, 323, 279, 279, 279, 279, 279, 308, 279, 279, 279, 321, 279, 279, 279, 279, 279, 308, 279, 279, 279, 279, 325, 328, 279, 279, 279, 279, 308, 279, 279, 279, 279, 326, 279, 279, 279, 279, 308, 279, 279, 279, 279, 327, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 330, 333, 279, 279, 279, 279, 308, 279, 279, 279, 279, 331, 279, 279, 279, 279, 308, 279, 279, 279, 279, 332, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 334, 279, 279, 279, 279, 308, 279, 279, 279, 279, 335, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 337, 339, 279, 279, 279, 279, 308, 279, 279, 279, 279, 338, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 340, 279, 279, 279, 279, 308, 279, 279, 279, 279, 327, 279, 279, 279, 279, 308, 279, 279, 279, 279, 342, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 343, 279, 279, 279, 279, 308, 279, 279, 279, 279, 344, 279, 279, 279, 279, 308, 279, 279, 279, 279, 345, 279, 279, 279, 279, 308, 279, 279, 279, 279, 346, 279, 279, 279, 279, 308, 279, 279, 279, 279, 347, 279, 279, 279, 279, 308, 279, 279, 279, 279, 279, 279, 279, 279, 308, 279, 279, 279, 279, 349, 352, 279, 279, 279, 279, 308, 279, 279, 279, 279, 350, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 351, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 353, 279, 279, 279, 279, 308, 279, 279, 279, 279, 354, 279, 279, 279, 279, 308, 279, 279, 279, 279, 338, 279, 279, 279, 279, 308, 279, 279, 279, 279, 356, 357, 279, 279, 279, 279, 308, 279, 279, 279, 279, 337, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 360, 279, 279, 279, 279, 308, 279, 279, 279, 279, 361, 279, 279, 279, 279, 308, 279, 279, 279, 279, 362, 279, 279, 279, 279, 308, 279, 279, 279, 279, 338, 279, 279, 279, 279, 308, 279, 279, 279, 279, 364, 366, 365, 279, 279, 279, 279, 308, 279, 279, 279, 279, 365, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 368, 279, 279, 279, 279, 308, 279, 279, 279, 279, 369, 370, 372, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 371, 279, 279, 279, 279, 308, 279, 279, 279, 279, 338, 279, 279, 279, 279, 308, 279, 279, 279, 279, 373, 374, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 308, 279, 279, 279, 279, 332, 279, 279, 279, 279, 308, 279, 279, 279, 279, 376, 377, 279, 279, 279, 279, 308, 279, 279, 279, 279, 351, 279, 279, 279, 279, 308, 279, 279, 279, 279, 378, 279, 279, 279, 279, 308, 279, 279, 279, 279, 357, 279, 279, 279, 279, 308, 279, 279, 279, 279, 380, 371, 279, 279, 279, 279, 308, 279, 279, 279, 279, 332, 279, 279, 279, 279, 308, 279, 279, 279, 279, 382, 279, 279, 279, 279, 308, 279, 279, 279, 279, 383, 384, 385, 279, 279, 279, 279, 308, 279, 279, 279, 279, 351, 279, 279, 279, 279, 308, 279, 279, 279, 279, 340, 279, 279, 279, 279, 308, 279, 279, 279, 279, 366, 279, 279, 279, 279, 308, 279, 279, 279, 279, 387, 279, 279, 279, 279, 308, 279, 279, 279, 279, 332, 362, 279, 279, 279, 279, 308, 279, 279, 279, 279, 389, 279, 279, 279, 279, 308, 279, 279, 279, 279, 390, 279, 279, 279, 279, 308, 279, 279, 279, 279, 328, 279, 279, 279, 279, 308, 279, 279, 392, 392, 393, 392, 393, 394, 397, 392, 392, 393, 392, 392, 392, 396, 393, 393, 393, 392, 392, 395, 392, 395, 61, 62, 61, 392, 392, 392, 392, 392, 63, 398, 392, 392, 399, 399, 401, 399, 400, 402, 403, 399, 405, 406, 407, 407, 399, 408, 410, 412, 416, 417, 399, 399, 399, 419, 407, 399, 400, 399, 413, 399, 418, 400, 400, 400, 399, 399, 399, 399, 399, 399, 399, 404, 399, 404, 399, 399, 399, 399, 399, 399, 399, 409, 399, 399, 399, 411, 399, 399, 399, 399, 399, 399, 399, 414, 414, 399, 399, 399, 399, 399, 413, 415, 399, 399, 411, 399, 401, 399, 414, 414, 399, 399, 399, 399, 399, 418, 399, 399, 420, 420, 436, 420, 421, 437, 424, 423, 439, 440, 420, 427, 428, 441, 442, 420, 443, 444, 445, 424, 447, 448, 449, 450, 434, 435, 424, 421, 424, 420, 420, 421, 421, 422, 423, 425, 426, 424, 420, 427, 428, 422, 430, 64, 420, 65, 431, 432, 68, 420, 424, 420, 71, 72, 77, 84, 434, 435, 424, 420, 421, 420, 420, 66, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 424, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 424, 420, 420, 420, 420, 420, 420, 420, 420, 429, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 67, 420, 67, 420, 420, 420, 420, 420, 66, 420, 420, 420, 420, 424, 420, 420, 420, 420, 438, 420, 438, 420, 420, 420, 424, 420, 420, 420, 420, 420, 424, 420, 424, 420, 420, 420, 420, 420, 446, 420, 70, 70, 422, 423, 425, 426, 424, 420, 427, 428, 422, 430, 64, 420, 65, 431, 432, 68, 420, 424, 420, 71, 72, 77, 84, 434, 435, 424, 420, 70, 420, 420, 66, 420, 420, 87, 420, 91, 420, 97, 420, 451, 451, 452, 451, 452, 456, 451, 455, 451, 452, 451, 451, 451, 454, 99, 99, 453, 101, 451, 455, 451, 99, 451, 451, 451, 454, 451, 100, 451, 100, 451, 451, 451, 451, 451, 454, 100, 451, 100, 451, 454, 451, 451, 451, 451, 454, 102, 451, 457, 457, 458, 457, 458, 459, 461, 463, 464, 458, 457, 458, 458, 458, 457, 457, 460, 457, 460, 462, 457, 457, 457, 457, 457, 465, 465, 467, 465, 466, 468, 471, 465, 473, 474, 479, 486, 465, 466, 465, 465, 465, 470, 466, 466, 466, 465, 465, 465, 469, 465, 469, 465, 465, 465, 465, 465, 470, 472, 465, 465, 465, 470, 465, 465, 465, 465, 470, 465, 475, 465, 465, 465, 465, 470, 465, 476, 465, 465, 465, 465, 470, 465, 477, 465, 465, 465, 465, 470, 465, 478, 465, 465, 465, 465, 470, 465, 470, 465, 465, 465, 465, 470, 465, 480, 465, 465, 465, 465, 470, 465, 481, 484, 465, 465, 465, 465, 470, 465, 482, 465, 465, 465, 465, 470, 465, 483, 465, 465, 465, 465, 470, 465, 470, 465, 465, 465, 465, 470, 465, 485, 465, 465, 465, 465, 470, 465, 470, 465, 465, 465, 465, 470, 465, 487, 465, 465, 465, 465, 470, 465, 488, 465, 465, 465, 465, 470, 465, 478, 465, 465, 465, 465, 470, 489, 489, 491, 489, 490, 492, 493, 495, 497, 498, 499, 501, 503, 504, 506, 507, 529, 531, 532, 533, 543, 544, 545, 546, 500, 547, 564, 569, 576, 581, 583, 589, 592, 593, 597, 591, 601, 610, 614, 617, 625, 628, 631, 632, 500, 489, 490, 489, 535, 489, 489, 548, 490, 490, 490, 489, 489, 489, 489, 489, 489, 494, 489, 494, 103, 103, 489, 489, 489, 489, 496, 496, 489, 104, 489, 489, 489, 500, 489, 489, 489, 489, 106, 105, 107, 489, 110, 105, 489, 489, 106, 108, 107, 109, 108, 502, 108, 106, 105, 107, 110, 105, 489, 489, 489, 505, 489, 489, 489, 489, 489, 489, 489, 508, 489, 111, 489, 511, 489, 512, 513, 513, 489, 489, 514, 113, 517, 114, 116, 489, 489, 527, 528, 489, 489, 489, 518, 489, 489, 489, 489, 509, 489, 489, 489, 489, 489, 489, 510, 489, 489, 489, 489, 489, 489, 489, 515, 489, 489, 489, 489, 489, 489, 489, 519, 521, 519, 489, 489, 489, 489, 489, 518, 520, 489, 489, 522, 525, 526, 489, 523, 524, 489, 489, 489, 489, 489, 489, 489, 489, 489, 104, 530, 489, 489, 489, 500, 489, 489, 489, 489, 104, 489, 489, 489, 489, 117, 117, 117, 489, 489, 489, 489, 489, 489, 534, 536, 118, 538, 536, 489, 489, 489, 489, 489, 119, 118, 537, 489, 489, 539, 541, 542, 489, 540, 489, 489, 489, 489, 536, 118, 538, 536, 120, 489, 489, 489, 489, 489, 119, 536, 118, 538, 536, 123, 489, 489, 489, 489, 489, 119, 489, 491, 489, 536, 118, 538, 536, 549, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 489, 489, 489, 489, 548, 536, 118, 538, 536, 550, 559, 562, 489, 489, 489, 489, 489, 548, 536, 118, 538, 536, 551, 489, 489, 489, 489, 489, 548, 536, 118, 538, 536, 552, 489, 489, 489, 489, 489, 548, 536, 118, 538, 536, 553, 489, 489, 489, 489, 489, 548, 536, 118, 538, 536, 554, 489, 489, 489, 489, 489, 548, 536, 118, 538, 536, 555, 489, 489, 489, 489, 489, 548, 536, 118, 538, 536, 556, 489, 489, 489, 489, 489, 548, 536, 118, 538, 536, 557, 489, 489, 489, 489, 489, 548, 536, 118, 538, 536, 558, 489, 489, 489, 489, 548, 536, 118, 538, 536, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 560, 489, 489, 489, 489, 489, 548, 536, 118, 538, 536, 561, 489, 489, 489, 489, 489, 548, 536, 118, 538, 536, 557, 489, 489, 489, 489, 489, 548, 536, 118, 538, 536, 563, 489, 489, 489, 489, 489, 548, 536, 118, 538, 536, 561, 489, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 565, 568, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 566, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 567, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 570, 573, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 571, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 572, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 574, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 575, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 577, 579, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 578, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 580, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 567, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 582, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 584, 586, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 585, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 582, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 587, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 588, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 578, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 590, 591, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 577, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 594, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 595, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 596, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 578, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 598, 600, 599, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 599, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 602, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 603, 604, 607, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 605, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 606, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 608, 609, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 572, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 611, 612, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 582, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 613, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 591, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 615, 616, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 572, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 578, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 618, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 619, 620, 623, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 582, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 621, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 622, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 624, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 548, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 626, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 572, 627, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 606, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 629, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 630, 489, 489, 489, 489, 548, 536, 118, 538, 536, 489, 568, 489, 489, 489, 489, 548, 489, 489, 104, 489, 633, 633, 635, 633, 634, 636, 638, 634, 633, 634, 634, 634, 633, 633, 633, 637, 633, 637, 639, 633, 633, 640, 640, 642, 640, 641, 640, 643, 640, 646, 640, 640, 641, 640, 640, 640, 645, 641, 641, 641, 640, 640, 640, 644, 640, 644, 124, 125, 124, 640, 640, 640, 640, 640, 126, 647, 640, 640, 648, 648, 650, 648, 649, 651, 652, 654, 657, 658, 659, 660, 661, 648, 662, 663, 665, 687, 648, 688, 690, 692, 648, 693, 696, 700, 702, 703, 648, 657, 705, 648, 722, 727, 734, 740, 747, 754, 759, 760, 764, 758, 769, 779, 785, 788, 797, 801, 805, 806, 657, 648, 649, 648, 648, 657, 685, 694, 648, 706, 649, 649, 649, 648, 648, 648, 648, 648, 648, 653, 648, 653, 648, 648, 127, 648, 648, 648, 648, 648, 648, 648, 655, 648, 648, 648, 656, 655, 648, 648, 648, 648, 648, 648, 656, 648, 648, 657, 648, 648, 648, 648, 648, 657, 648, 648, 648, 648, 648, 664, 648, 648, 648, 677, 680, 681, 682, 667, 677, 680, 671, 681, 673, 682, 666, 648, 667, 671, 673, 666, 648, 670, 671, 673, 668, 648, 669, 671, 673, 668, 648, 670, 671, 673, 668, 648, 671, 673, 648, 672, 648, 648, 674, 676, 648, 128, 648, 648, 648, 670, 671, 673, 678, 648, 679, 671, 673, 678, 648, 670, 671, 673, 678, 648, 670, 671, 673, 668, 648, 670, 671, 673, 668, 648, 670, 671, 673, 683, 683, 683, 648, 684, 671, 673, 683, 683, 683, 648, 670, 671, 673, 683, 683, 683, 648, 686, 671, 673, 685, 648, 670, 671, 673, 668, 648, 648, 648, 657, 689, 648, 648, 648, 691, 648, 648, 648, 648, 648, 648, 657, 648, 131, 648, 648, 648, 648, 648, 656, 132, 648, 648, 648, 648, 648, 694, 648, 132, 697, 648, 648, 648, 648, 648, 694, 132, 698, 648, 648, 648, 648, 648, 694, 132, 699, 648, 648, 648, 648, 648, 694, 132, 694, 648, 648, 648, 648, 648, 694, 132, 701, 648, 648, 648, 648, 648, 694, 132, 694, 648, 648, 648, 648, 648, 694, 648, 704, 648, 648, 707, 648, 648, 648, 648, 706, 648, 648, 648, 648, 648, 706, 708, 717, 720, 648, 648, 648, 648, 648, 706, 709, 648, 648, 648, 648, 648, 706, 710, 648, 648, 648, 648, 648, 706, 711, 648, 648, 648, 648, 648, 706, 712, 648, 648, 648, 648, 648, 706, 713, 648, 648, 648, 648, 648, 706, 714, 648, 648, 648, 648, 648, 706, 715, 648, 648, 648, 648, 648, 706, 716, 648, 648, 648, 648, 706, 706, 648, 648, 648, 648, 706, 718, 648, 648, 648, 648, 648, 706, 719, 648, 648, 648, 648, 648, 706, 715, 648, 648, 648, 648, 648, 706, 721, 648, 648, 648, 648, 648, 706, 719, 648, 648, 648, 648, 648, 706, 648, 723, 726, 648, 648, 648, 648, 706, 648, 724, 648, 648, 648, 648, 706, 648, 725, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 728, 731, 648, 648, 648, 648, 706, 648, 729, 648, 648, 648, 648, 706, 648, 730, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 732, 648, 648, 648, 648, 706, 648, 733, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 735, 737, 648, 648, 648, 648, 706, 648, 736, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 738, 648, 648, 648, 648, 706, 648, 739, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 741, 706, 648, 648, 648, 648, 706, 648, 742, 648, 648, 648, 648, 706, 648, 743, 648, 648, 648, 648, 706, 648, 744, 648, 648, 648, 648, 706, 648, 745, 648, 648, 648, 648, 706, 648, 746, 648, 648, 648, 648, 706, 648, 648, 648, 648, 648, 648, 706, 648, 748, 751, 648, 648, 648, 648, 706, 648, 749, 648, 648, 648, 648, 706, 648, 706, 750, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 706, 752, 648, 648, 648, 648, 706, 648, 753, 648, 648, 648, 648, 706, 648, 736, 648, 648, 648, 648, 706, 648, 755, 758, 648, 648, 648, 648, 706, 648, 756, 648, 648, 648, 648, 706, 648, 757, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 706, 706, 648, 648, 648, 648, 706, 648, 761, 648, 648, 648, 648, 706, 648, 762, 648, 648, 648, 648, 706, 648, 763, 648, 648, 648, 648, 706, 648, 736, 648, 648, 648, 648, 706, 648, 765, 767, 768, 648, 648, 648, 648, 706, 648, 766, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 770, 648, 648, 648, 648, 706, 648, 771, 772, 775, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 773, 648, 648, 648, 648, 706, 648, 774, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 776, 777, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 778, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 780, 782, 648, 648, 648, 648, 706, 648, 781, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 783, 648, 648, 648, 648, 706, 648, 784, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 786, 787, 648, 648, 648, 648, 706, 648, 730, 648, 648, 648, 648, 706, 648, 757, 648, 648, 648, 648, 706, 648, 789, 648, 648, 648, 648, 706, 648, 790, 792, 795, 648, 648, 648, 648, 706, 648, 791, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 793, 648, 648, 648, 648, 706, 648, 794, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 796, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 798, 648, 648, 648, 648, 706, 648, 730, 799, 648, 648, 648, 648, 706, 648, 800, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 802, 648, 648, 648, 648, 706, 648, 803, 648, 648, 648, 648, 706, 648, 804, 648, 648, 648, 648, 706, 648, 706, 648, 648, 648, 648, 706, 648, 657, 648, 648, 808, 808, 809, 807, 808, 807, 133, 133, 134, 807, 133, 807, 807, 807, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 260, 260, 260, 260, 265, 265, 265, 265, 279, 279, 392, 392, 392, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 451, 451, 451, 451, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 640, 640, 640, 648, 648, 648, 648, 648, 648, 807, 807, 135, 135, 135, 135, 135, 135, 135, 135, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 255, 255, 258, 260, 260, 260, 265, 265, 265, 265, 270, 272, 274, 274, 274, 274, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 392, 392, 392, 392, 392, 392, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 451, 451, 451, 451, 451, 457, 457, 457, 457, 457, 457, 457, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 633, 633, 633, 633, 633, 633, 640, 640, 640, 640, 640, 640, 640, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 807, 807, 0 , 0 ];
static _lexer_cond_actions: [i16 ; 6153] = [ 0, 427, 0, 427, 0, 427, 0, 427, 0, 427, 0, 427, 0, 427, 0, 427, 0, 427, 415, 415, 468, 415, 427, 57, 57, 0, 43, 43, 43, 57, 43, 57, 43, 0, 43, 57, 57, 0, 57, 57, 57, 57, 57, 43, 0, 57, 57, 57, 57, 57, 0, 57, 57, 57, 57, 57, 0, 55, 55, 55, 39, 0, 55, 55, 786, 55, 0, 0, 55, 55, 55, 39, 0, 55, 55, 55, 0, 0, 0, 55, 55, 786, 55, 0, 55, 55, 55, 0, 55, 55, 55, 39, 0, 55, 55, 786, 55, 0, 39, 39, 0, 55, 55, 55, 0, 0, 0, 55, 0, 55, 55, 55, 55, 0, 0, 0, 55, 55, 786, 55, 39, 0, 55, 55, 55, 0, 0, 0, 0, 73, 73, 0, 61, 61, 61, 73, 61, 73, 61, 0, 61, 73, 73, 0, 73, 73, 73, 73, 73, 61, 0, 73, 73, 73, 73, 73, 0, 73, 73, 73, 73, 73, 0, 71, 71, 71, 39, 0, 71, 71, 786, 71, 0, 0, 71, 71, 71, 39, 0, 71, 71, 71, 0, 0, 0, 71, 71, 786, 71, 0, 71, 71, 71, 0, 71, 71, 71, 39, 0, 71, 71, 786, 71, 0, 39, 39, 0, 71, 71, 71, 0, 0, 0, 71, 0, 71, 71, 71, 71, 0, 0, 0, 71, 71, 786, 71, 39, 0, 71, 71, 71, 0, 0, 0, 0, 101, 101, 0, 91, 91, 91, 101, 91, 101, 91, 0, 91, 101, 101, 0, 101, 101, 101, 101, 101, 91, 0, 101, 101, 101, 101, 101, 0, 101, 101, 101, 101, 101, 0, 121, 121, 0, 109, 109, 109, 121, 109, 121, 109, 0, 109, 121, 121, 0, 121, 121, 121, 121, 121, 109, 0, 121, 121, 121, 121, 121, 0, 121, 121, 121, 121, 121, 0, 0, 0, 0, 133, 133, 133, 0, 133, 0, 133, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 175, 175, 175, 175, 175, 145, 173, 173, 173, 151, 0, 189, 189, 179, 0, 0, 0, 189, 189, 189, 189, 189, 0, 798, 235, 804, 235, 0, 213, 0, 239, 239, 239, 239, 239, 0, 213, 239, 1, 235, 5, 5, 570, 1049, 5, 573, 1049, 588, 1049, 5, 570, 5, 570, 588, 5, 576, 5, 5, 588, 983, 235, 5, 5, 5, 5, 5, 5, 983, 235, 5, 235, 235, 5, 0, 0, 13, 995, 0, 15, 995, 217, 995, 0, 13, 0, 13, 217, 0, 17, 0, 0, 217, 804, 235, 0, 0, 0, 0, 0, 0, 804, 235, 0, 235, 235, 0, 0, 213, 0, 235, 804, 235, 235, 235, 235, 0, 0, 213, 0, 235, 0, 235, 235, 235, 235, 0, 0, 213, 0, 235, 0, 235, 235, 235, 235, 0, 0, 213, 0, 235, 0, 235, 235, 235, 235, 0, 0, 213, 0, 235, 0, 235, 235, 235, 235, 0, 0, 213, 0, 235, 804, 235, 235, 235, 235, 0, 0, 213, 0, 235, 0, 235, 235, 235, 235, 0, 0, 213, 0, 235, 0, 0, 235, 235, 235, 235, 0, 0, 213, 0, 235, 0, 235, 235, 235, 235, 0, 0, 213, 0, 235, 0, 235, 235, 235, 235, 0, 0, 213, 0, 235, 804, 235, 235, 235, 235, 0, 0, 213, 0, 235, 0, 235, 235, 235, 235, 0, 0, 213, 0, 235, 804, 235, 235, 235, 235, 0, 0, 213, 0, 235, 0, 235, 235, 235, 235, 0, 0, 213, 0, 235, 0, 235, 235, 235, 235, 0, 0, 213, 0, 235, 0, 235, 235, 235, 235, 0, 0, 237, 0, 237, 0, 237, 217, 237, 0, 0, 237, 0, 237, 0, 237, 217, 237, 0, 237, 217, 237, 0, 237, 0, 237, 0, 0, 0, 0, 247, 813, 247, 0, 247, 247, 247, 813, 241, 249, 1, 247, 5, 5, 5, 5, 247, 987, 247, 5, 247, 247, 247, 987, 321, 321, 321, 0, 0, 279, 295, 327, 1, 0, 0, 0, 0, 273, 327, 567, 5, 5, 5, 5, 606, 327, 927, 645, 645, 645, 645, 1054, 7, 648, 9, 9, 9, 9, 991, 0, 429, 9, 9, 9, 9, 991, 0, 1, 327, 325, 325, 0, 287, 287, 287, 325, 287, 325, 287, 0, 287, 325, 325, 0, 325, 325, 325, 325, 325, 287, 0, 287, 287, 325, 0, 325, 325, 325, 325, 0, 325, 325, 325, 325, 0, 0, 325, 323, 323, 323, 323, 0, 327, 293, 828, 0, 0, 828, 327, 327, 327, 327, 327, 0, 828, 0, 0, 828, 0, 325, 325, 325, 325, 325, 0, 828, 0, 0, 828, 0, 325, 325, 325, 325, 325, 0, 828, 0, 0, 828, 828, 325, 325, 325, 325, 325, 0, 828, 0, 0, 828, 828, 325, 325, 325, 325, 325, 0, 0, 349, 349, 337, 0, 0, 0, 349, 349, 349, 349, 349, 0, 401, 401, 401, 401, 401, 355, 0, 399, 0, 399, 0, 399, 401, 401, 401, 401, 401, 0, 0, 403, 0, 0, 33, 783, 0, 411, 405, 411, 419, 419, 1, 419, 0, 0, 39, 0, 39, 0, 417, 0, 0, 0, 421, 630, 971, 7, 681, 0, 0, 425, 465, 413, 413, 423, 1, 425, 0, 425, 45, 45, 432, 45, 0, 39, 39, 0, 47, 0, 0, 0, 51, 0, 0, 41, 53, 0, 49, 49, 49, 49, 49, 49, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 555, 495, 0, 513, 0, 513, 513, 501, 501, 501, 501, 0, 0, 0, 903, 507, 871, 871, 871, 871, 0, 0, 0, 0, 871, 1009, 895, 999, 999, 999, 999, 0, 0, 0, 871, 871, 871, 39, 0, 501, 501, 501, 0, 0, 0, 501, 501, 501, 0, 0, 887, 879, 879, 879, 879, 0, 0, 879, 879, 879, 39, 0, 1, 879, 879, 879, 879, 0, 0, 0, 0, 0, 0, 0, 537, 0, 0, 0, 537, 0, 0, 0, 537, 0, 0, 0, 537, 531, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 0, 0, 549, 0, 549, 0, 0, 0, 0, 0, 0, 0, 549, 0, 549, 549, 0, 911, 0, 0, 0, 0, 0, 549, 0, 0, 0, 0, 0, 0, 549, 0, 549, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 0, 549, 549, 0, 0, 0, 0, 543, 525, 0, 0, 0, 519, 519, 63, 63, 435, 63, 39, 39, 65, 0, 0, 59, 69, 0, 67, 67, 67, 67, 67, 67, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 558, 498, 0, 516, 0, 516, 516, 504, 504, 504, 504, 0, 0, 0, 907, 510, 875, 875, 875, 875, 0, 0, 0, 0, 875, 1014, 899, 1004, 1004, 1004, 1004, 0, 0, 0, 875, 875, 875, 39, 0, 504, 504, 504, 0, 0, 0, 504, 504, 504, 0, 0, 891, 883, 883, 883, 883, 0, 0, 883, 883, 883, 39, 0, 1, 883, 883, 883, 883, 0, 0, 0, 0, 0, 0, 0, 540, 0, 0, 0, 540, 0, 0, 0, 540, 0, 0, 0, 540, 534, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 552, 0, 0, 552, 0, 552, 0, 0, 0, 0, 0, 0, 0, 552, 0, 552, 552, 0, 915, 0, 0, 0, 0, 0, 552, 0, 0, 0, 0, 0, 0, 552, 0, 552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 492, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 552, 0, 552, 552, 0, 0, 0, 0, 546, 528, 0, 0, 0, 522, 522, 75, 75, 438, 75, 0, 0, 0, 77, 0, 0, 0, 79, 81, 81, 81, 561, 83, 83, 441, 83, 0, 85, 87, 87, 867, 87, 564, 93, 93, 444, 93, 39, 95, 0, 0, 89, 99, 0, 97, 97, 97, 97, 97, 97, 0, 103, 103, 447, 103, 105, 111, 111, 450, 111, 0, 39, 0, 113, 0, 0, 0, 117, 0, 0, 107, 119, 0, 115, 115, 115, 115, 115, 115, 0, 123, 123, 453, 123, 0, 0, 125, 0, 0, 0, 127, 0, 0, 129, 0, 0, 131, 0, 0, 0, 0, 135, 135, 135, 135, 135, 135, 0, 139, 139, 139, 139, 139, 0, 137, 137, 137, 137, 137, 0, 155, 155, 1, 155, 0, 0, 0, 39, 39, 0, 0, 0, 0, 147, 0, 0, 0, 0, 0, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 0, 153, 792, 147, 153, 795, 0, 0, 0, 169, 579, 147, 147, 147, 165, 931, 7, 651, 0, 171, 171, 0, 145, 145, 145, 171, 145, 171, 145, 0, 145, 171, 171, 0, 0, 163, 163, 163, 163, 163, 163, 0, 0, 165, 147, 165, 147, 165, 147, 165, 149, 167, 147, 0, 165, 147, 165, 0, 147, 147, 171, 147, 165, 147, 165, 143, 143, 143, 177, 177, 177, 177, 177, 792, 143, 143, 143, 0, 159, 159, 159, 159, 159, 792, 143, 143, 143, 0, 159, 159, 159, 159, 159, 792, 143, 143, 143, 0, 159, 159, 159, 159, 159, 792, 143, 143, 143, 789, 159, 159, 159, 159, 159, 792, 143, 143, 143, 0, 159, 159, 159, 159, 159, 792, 143, 143, 143, 789, 159, 159, 159, 159, 159, 792, 0, 171, 1, 171, 143, 143, 143, 0, 161, 161, 161, 161, 795, 143, 143, 143, 177, 177, 177, 177, 177, 795, 143, 143, 143, 0, 0, 0, 161, 161, 161, 161, 161, 795, 143, 143, 143, 0, 161, 161, 161, 161, 161, 795, 143, 143, 143, 0, 161, 161, 161, 161, 161, 795, 143, 143, 143, 0, 161, 161, 161, 161, 161, 795, 143, 143, 143, 0, 161, 161, 161, 161, 161, 795, 143, 143, 143, 0, 161, 161, 161, 161, 161, 795, 143, 143, 143, 0, 161, 161, 161, 161, 161, 795, 143, 143, 143, 0, 161, 161, 161, 161, 161, 795, 143, 143, 143, 0, 161, 161, 161, 161, 795, 143, 143, 143, 789, 161, 161, 161, 161, 795, 143, 143, 143, 0, 161, 161, 161, 161, 161, 795, 143, 143, 143, 0, 161, 161, 161, 161, 161, 795, 143, 143, 143, 0, 161, 161, 161, 161, 161, 795, 143, 143, 143, 0, 161, 161, 161, 161, 161, 795, 143, 143, 143, 0, 161, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 789, 161, 161, 161, 161, 795, 143, 143, 143, 161, 789, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 789, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 789, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 789, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 789, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 157, 0, 157, 157, 157, 157, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 141, 161, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 789, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 789, 161, 161, 161, 161, 795, 143, 143, 143, 161, 789, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 789, 161, 161, 161, 161, 795, 143, 143, 143, 161, 789, 789, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 0, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 789, 161, 161, 161, 161, 795, 143, 143, 143, 161, 789, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 0, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 789, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 789, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 0, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 143, 143, 143, 161, 0, 161, 161, 161, 161, 795, 147, 165, 183, 183, 0, 183, 0, 0, 0, 181, 181, 0, 181, 181, 181, 39, 0, 0, 0, 185, 935, 7, 654, 0, 0, 0, 0, 187, 187, 187, 187, 187, 0, 1, 187, 582, 195, 195, 1, 195, 0, 0, 0, 191, 0, 0, 0, 0, 191, 0, 0, 0, 0, 0, 193, 191, 191, 0, 0, 193, 0, 193, 0, 193, 0, 0, 0, 0, 203, 585, 191, 191, 191, 201, 939, 7, 657, 0, 191, 201, 191, 201, 191, 201, 191, 0, 201, 191, 201, 0, 191, 191, 205, 191, 201, 191, 201, 0, 0, 197, 197, 197, 197, 197, 0, 0, 684, 693, 0, 205, 1, 205, 0, 0, 199, 199, 199, 199, 199, 0, 191, 201, 221, 221, 1, 221, 807, 0, 804, 804, 0, 0, 217, 804, 0, 0, 0, 217, 0, 0, 0, 804, 0, 39, 39, 39, 0, 0, 804, 807, 804, 217, 219, 807, 807, 13, 995, 0, 15, 995, 217, 995, 0, 13, 0, 13, 217, 0, 17, 0, 0, 217, 804, 231, 0, 0, 0, 0, 0, 0, 804, 231, 807, 231, 231, 0, 229, 229, 462, 229, 217, 217, 217, 209, 462, 217, 804, 217, 217, 217, 239, 462, 217, 217, 217, 239, 747, 462, 217, 801, 217, 217, 225, 462, 217, 217, 217, 239, 0, 229, 217, 229, 211, 227, 459, 215, 215, 223, 738, 0, 213, 0, 229, 229, 229, 229, 229, 0, 633, 462, 217, 217, 804, 217, 229, 594, 943, 7, 660, 0, 750, 462, 217, 804, 217, 217, 229, 217, 227, 804, 233, 804, 233, 456, 207, 207, 223, 979, 233, 5, 5, 570, 1049, 5, 573, 1049, 588, 1049, 5, 570, 5, 570, 588, 5, 576, 5, 5, 588, 983, 591, 5, 5, 5, 5, 5, 5, 983, 591, 5, 591, 591, 5, 217, 233, 0, 233, 0, 233, 0, 233, 243, 243, 39, 243, 39, 39, 241, 813, 241, 39, 241, 241, 241, 813, 0, 0, 0, 0, 245, 813, 245, 0, 245, 245, 245, 813, 753, 0, 241, 0, 249, 249, 249, 249, 249, 813, 0, 241, 0, 245, 810, 245, 245, 245, 245, 813, 1, 245, 255, 255, 0, 255, 0, 0, 0, 0, 0, 0, 253, 0, 0, 0, 257, 947, 7, 663, 0, 1, 259, 597, 251, 259, 636, 263, 263, 1, 263, 0, 0, 0, 261, 0, 0, 0, 0, 261, 0, 261, 261, 261, 819, 0, 0, 0, 267, 603, 951, 7, 666, 0, 271, 271, 271, 271, 271, 819, 1, 269, 600, 265, 816, 265, 265, 265, 265, 819, 265, 0, 265, 265, 265, 265, 819, 265, 0, 265, 265, 265, 265, 819, 265, 0, 265, 265, 265, 265, 819, 265, 0, 265, 265, 265, 265, 819, 265, 816, 265, 265, 265, 265, 819, 265, 0, 265, 265, 265, 265, 819, 265, 0, 0, 265, 265, 265, 265, 819, 265, 0, 265, 265, 265, 265, 819, 265, 0, 265, 265, 265, 265, 819, 265, 816, 265, 265, 265, 265, 819, 265, 0, 265, 265, 265, 265, 819, 265, 816, 265, 265, 265, 265, 819, 265, 0, 265, 265, 265, 265, 819, 265, 0, 265, 265, 265, 265, 819, 265, 0, 265, 265, 265, 265, 819, 297, 297, 1, 297, 0, 0, 0, 39, 822, 0, 0, 822, 822, 0, 0, 39, 834, 0, 834, 39, 834, 834, 0, 0, 834, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 0, 834, 834, 295, 0, 295, 834, 295, 295, 831, 0, 0, 0, 317, 609, 295, 295, 319, 955, 7, 669, 0, 0, 0, 277, 303, 303, 303, 0, 0, 279, 0, 295, 313, 756, 822, 295, 301, 295, 327, 1, 0, 0, 295, 0, 0, 273, 313, 648, 9, 9, 9, 9, 991, 0, 1, 0, 0, 0, 0, 273, 295, 313, 0, 319, 295, 319, 319, 319, 319, 275, 0, 283, 0, 287, 0, 283, 0, 0, 0, 287, 291, 0, 0, 0, 0, 0, 287, 287, 0, 0, 319, 319, 319, 0, 287, 285, 287, 307, 0, 307, 307, 307, 307, 307, 307, 0, 281, 307, 287, 307, 287, 307, 287, 0, 307, 287, 307, 287, 307, 287, 307, 0, 0, 0, 307, 307, 307, 307, 307, 0, 0, 687, 696, 0, 0, 0, 702, 0, 0, 708, 726, 732, 720, 714, 281, 307, 285, 307, 0, 0, 319, 295, 319, 834, 295, 295, 319, 295, 0, 319, 289, 289, 289, 0, 0, 0, 309, 311, 311, 311, 311, 311, 0, 828, 0, 0, 828, 327, 327, 327, 327, 327, 0, 11, 0, 690, 699, 0, 0, 0, 705, 0, 711, 729, 723, 717, 828, 0, 0, 828, 0, 319, 319, 319, 319, 319, 0, 828, 0, 0, 828, 0, 319, 319, 319, 319, 319, 0, 741, 1, 319, 828, 0, 0, 828, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 327, 327, 327, 327, 327, 831, 828, 0, 0, 828, 831, 831, 831, 315, 315, 315, 315, 315, 831, 828, 0, 0, 828, 831, 315, 315, 315, 315, 315, 831, 828, 0, 0, 828, 831, 315, 315, 315, 315, 315, 831, 828, 0, 0, 828, 831, 315, 315, 315, 315, 315, 831, 828, 0, 0, 828, 831, 315, 315, 315, 315, 315, 831, 828, 0, 0, 828, 831, 315, 315, 315, 315, 315, 831, 828, 0, 0, 828, 831, 315, 315, 315, 315, 315, 831, 828, 0, 0, 828, 831, 315, 315, 315, 315, 315, 831, 828, 0, 0, 828, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 828, 315, 315, 315, 315, 831, 828, 0, 0, 828, 831, 315, 315, 315, 315, 315, 831, 828, 0, 0, 828, 831, 315, 315, 315, 315, 315, 831, 828, 0, 0, 828, 831, 315, 315, 315, 315, 315, 831, 828, 0, 0, 828, 831, 315, 315, 315, 315, 315, 831, 828, 0, 0, 828, 831, 315, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 828, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 828, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 828, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 828, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 828, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 828, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 828, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 828, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 828, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 828, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 825, 828, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 831, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 828, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 828, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 831, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 828, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 825, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 828, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 831, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 825, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 825, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 828, 0, 0, 828, 315, 831, 315, 315, 315, 315, 831, 639, 295, 0, 319, 331, 331, 1, 331, 0, 0, 0, 0, 329, 0, 0, 0, 333, 615, 959, 7, 672, 0, 1, 335, 612, 343, 343, 1, 343, 0, 339, 0, 339, 0, 341, 341, 0, 341, 341, 341, 39, 0, 0, 0, 345, 621, 963, 7, 675, 0, 0, 0, 0, 347, 347, 347, 347, 347, 0, 1, 347, 618, 375, 375, 1, 375, 0, 0, 0, 39, 861, 0, 0, 0, 0, 369, 0, 0, 0, 0, 371, 0, 0, 0, 367, 39, 855, 855, 0, 0, 363, 861, 0, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 864, 373, 0, 373, 353, 861, 0, 855, 373, 858, 0, 0, 0, 395, 627, 361, 361, 391, 967, 7, 678, 0, 397, 397, 0, 355, 355, 355, 397, 355, 397, 355, 0, 355, 397, 397, 0, 0, 381, 381, 381, 381, 381, 381, 0, 365, 403, 861, 357, 365, 389, 759, 762, 861, 365, 387, 365, 369, 389, 0, 383, 369, 393, 0, 0, 0, 0, 29, 0, 0, 780, 0, 780, 0, 29, 1044, 29, 780, 780, 29, 1044, 29, 780, 780, 29, 1044, 0, 31, 31, 0, 975, 0, 31, 31, 0, 975, 31, 31, 975, 0, 474, 483, 39, 0, 471, 0, 480, 486, 477, 25, 774, 774, 25, 1034, 0, 31, 31, 0, 975, 0, 31, 31, 0, 975, 21, 768, 768, 21, 1024, 23, 771, 771, 23, 1029, 19, 765, 765, 19, 19, 19, 1019, 0, 31, 31, 0, 0, 0, 975, 0, 31, 31, 0, 0, 0, 975, 27, 777, 777, 27, 1039, 27, 777, 777, 27, 1039, 357, 393, 861, 0, 389, 361, 389, 0, 359, 361, 393, 361, 389, 361, 861, 389, 0, 397, 397, 397, 397, 397, 0, 0, 403, 403, 403, 403, 403, 855, 735, 0, 855, 379, 379, 379, 379, 379, 855, 0, 855, 379, 379, 379, 379, 379, 855, 0, 855, 379, 379, 379, 379, 379, 855, 0, 852, 379, 379, 379, 379, 379, 855, 0, 855, 379, 379, 379, 379, 379, 855, 0, 852, 379, 379, 379, 379, 379, 855, 744, 1, 397, 624, 0, 385, 385, 385, 385, 858, 403, 403, 403, 403, 403, 858, 0, 0, 0, 385, 385, 385, 385, 385, 858, 0, 385, 385, 385, 385, 385, 858, 0, 385, 385, 385, 385, 385, 858, 0, 385, 385, 385, 385, 385, 858, 0, 385, 385, 385, 385, 385, 858, 0, 385, 385, 385, 385, 385, 858, 0, 385, 385, 385, 385, 385, 858, 0, 385, 385, 385, 385, 385, 858, 0, 385, 385, 385, 385, 858, 852, 385, 385, 385, 385, 858, 0, 385, 385, 385, 385, 385, 858, 0, 385, 385, 385, 385, 385, 858, 0, 385, 385, 385, 385, 385, 858, 0, 385, 385, 385, 385, 385, 858, 0, 385, 385, 385, 385, 385, 858, 385, 0, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 837, 385, 385, 385, 385, 858, 385, 843, 385, 385, 385, 385, 858, 385, 0, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 843, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 846, 385, 385, 385, 385, 858, 385, 0, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 843, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 843, 385, 385, 385, 385, 858, 385, 0, 843, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 377, 0, 377, 377, 377, 377, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 351, 385, 385, 385, 385, 385, 858, 385, 0, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 843, 0, 385, 385, 385, 385, 858, 385, 843, 385, 385, 385, 385, 858, 385, 852, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 852, 385, 385, 385, 385, 858, 385, 843, 385, 385, 385, 385, 858, 385, 840, 843, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 0, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 846, 385, 385, 385, 385, 858, 385, 852, 385, 385, 385, 385, 858, 385, 849, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 0, 0, 385, 385, 385, 385, 858, 385, 852, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 840, 385, 385, 385, 385, 858, 385, 0, 0, 385, 385, 385, 385, 858, 385, 852, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 846, 385, 385, 385, 385, 858, 385, 0, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 852, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 849, 385, 385, 385, 385, 858, 385, 0, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 0, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 837, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 840, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 840, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 840, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 0, 385, 385, 385, 385, 858, 385, 849, 385, 385, 385, 385, 858, 365, 861, 391, 642, 39, 39, 33, 783, 39, 407, 0, 0, 33, 783, 0, 409, 405, 409, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 57, 57, 57, 57, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 73, 73, 73, 73, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 101, 101, 101, 101, 121, 121, 121, 121, 175, 173, 189, 189, 189, 235, 235, 239, 239, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 247, 249, 247, 247, 321, 327, 327, 327, 327, 327, 327, 327, 325, 325, 325, 325, 325, 325, 323, 327, 327, 325, 325, 325, 325, 349, 349, 349, 401, 399, 399, 399, 401, 403, 411, 411, 421, 630, 971, 681, 425, 423, 425, 425, 51, 53, 49, 49, 919, 555, 495, 513, 513, 513, 501, 501, 903, 507, 871, 871, 871, 1009, 895, 999, 999, 871, 501, 501, 887, 879, 879, 879, 879, 879, 537, 537, 537, 537, 531, 549, 549, 549, 549, 911, 549, 549, 549, 549, 489, 549, 549, 549, 549, 549, 549, 543, 525, 519, 519, 69, 67, 67, 923, 558, 498, 516, 516, 516, 504, 504, 907, 510, 875, 875, 875, 1014, 899, 1004, 1004, 875, 504, 504, 891, 883, 883, 883, 883, 883, 540, 540, 540, 540, 534, 552, 552, 552, 552, 915, 552, 552, 552, 552, 492, 552, 552, 552, 552, 552, 552, 546, 528, 522, 522, 79, 81, 87, 99, 97, 97, 117, 119, 115, 115, 127, 131, 135, 135, 139, 137, 169, 579, 165, 931, 651, 171, 163, 163, 165, 165, 165, 165, 167, 165, 165, 171, 165, 165, 177, 159, 159, 159, 159, 159, 159, 171, 171, 161, 177, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 157, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 165, 185, 935, 654, 187, 187, 582, 203, 585, 201, 939, 657, 201, 201, 201, 201, 201, 205, 201, 201, 197, 684, 693, 205, 205, 199, 201, 231, 229, 239, 239, 747, 225, 239, 229, 229, 227, 223, 738, 229, 633, 229, 594, 943, 660, 750, 229, 227, 233, 233, 223, 233, 591, 233, 233, 233, 233, 245, 753, 249, 245, 245, 257, 947, 663, 259, 597, 259, 636, 267, 603, 951, 666, 271, 269, 600, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 317, 609, 319, 955, 669, 305, 303, 313, 756, 301, 327, 313, 299, 313, 319, 319, 319, 319, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 687, 696, 702, 708, 726, 732, 720, 714, 307, 307, 319, 319, 319, 319, 309, 311, 327, 690, 699, 705, 711, 729, 723, 717, 319, 319, 741, 319, 315, 327, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 639, 319, 333, 615, 959, 672, 335, 612, 345, 621, 963, 675, 347, 347, 618, 395, 627, 391, 967, 678, 397, 381, 381, 403, 389, 759, 762, 387, 389, 383, 393, 1044, 1044, 1044, 975, 975, 975, 474, 483, 471, 480, 486, 477, 1034, 975, 975, 1024, 1029, 1019, 975, 975, 1039, 1039, 393, 389, 389, 393, 389, 389, 397, 403, 735, 379, 379, 379, 379, 379, 379, 744, 397, 624, 385, 403, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 377, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 391, 642, 409, 409, 0 , 0 ];
static _lexer_to_state_actions: [i8 ; 812] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 35, 0, 35, 0, 0, 0, 35, 35, 0, 0, 0, 0, 35, 0, 35, 0, 35, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0 , 0 ];
static _lexer_from_state_actions: [i8 ; 812] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 37, 0, 37, 0, 0, 0, 37, 37, 0, 0, 0, 0, 37, 0, 37, 0, 37, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0 , 0 ];
static _lexer_eof_cond_spaces: [i8 ; 812] = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 0 ];
static _lexer_eof_cond_key_offs: [i8 ; 812] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _lexer_eof_cond_key_lens: [i8 ; 812] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _lexer_eof_cond_keys: [i8 ; 2] = [ 0 , 0 ];
static _lexer_eof_trans: [i16 ; 812] = [ 0, 5370, 5371, 5372, 5373, 5374, 5375, 5376, 5377, 5378, 5379, 5380, 5381, 5382, 5383, 5384, 5385, 5386, 5387, 5388, 5389, 5390, 5391, 5392, 5393, 5394, 5395, 5396, 5397, 5398, 5399, 5400, 5401, 5402, 5403, 5404, 5405, 5406, 5407, 5408, 5409, 5410, 5411, 5412, 5413, 5414, 5415, 5416, 5417, 5418, 5419, 5420, 5421, 5422, 5423, 0, 0, 0, 0, 5424, 5425, 5426, 5427, 5428, 5429, 5430, 5431, 5432, 5433, 5434, 5435, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5444, 5445, 5446, 5447, 5448, 5449, 5450, 5451, 5452, 5453, 5454, 5455, 5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5465, 5466, 5467, 5468, 5469, 5470, 5471, 5472, 5473, 5474, 5475, 5476, 5477, 5478, 5479, 5480, 5481, 5482, 5483, 5484, 5485, 5486, 5487, 5488, 5489, 5490, 5491, 5492, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 0, 5500, 5501, 5502, 5503, 5504, 5505, 5506, 5507, 0, 5508, 5509, 5510, 5511, 5512, 5513, 5514, 5515, 5516, 5517, 5518, 5519, 5520, 5521, 5522, 5523, 5524, 5525, 5526, 5527, 5528, 5529, 5530, 5531, 5532, 5533, 5534, 5535, 5536, 5537, 5538, 5539, 5540, 5541, 5542, 5543, 5544, 5545, 5546, 5547, 5548, 5549, 5550, 5551, 5552, 5553, 5554, 5555, 5556, 5557, 5558, 5559, 5560, 5561, 5562, 0, 5563, 5564, 5565, 5566, 5567, 5568, 5569, 5570, 5571, 5572, 5573, 5574, 5575, 5576, 5577, 5578, 5579, 5580, 5581, 5582, 5583, 5584, 5585, 5586, 5587, 5588, 5589, 5590, 5591, 5592, 5593, 5594, 5595, 5596, 5597, 5598, 5599, 5600, 5601, 5602, 5603, 5604, 5605, 5606, 5607, 5608, 5609, 5610, 5611, 5612, 5613, 5614, 5615, 5616, 0, 5617, 5618, 0, 5619, 0, 5620, 5621, 5622, 0, 0, 5623, 5624, 5625, 5626, 0, 5627, 0, 5628, 0, 5629, 5630, 5631, 5632, 0, 5633, 5634, 5635, 5636, 5637, 5638, 5639, 5640, 5641, 5642, 5643, 5644, 5645, 5646, 5647, 5648, 5649, 5650, 5651, 5652, 5653, 5654, 5655, 5656, 5657, 5658, 5659, 5660, 5661, 5662, 5663, 5664, 5665, 5666, 5667, 5668, 5669, 5670, 5671, 5672, 5673, 5674, 5675, 5676, 5677, 5678, 5679, 5680, 5681, 5682, 5683, 5684, 5685, 5686, 5687, 5688, 5689, 5690, 5691, 5692, 5693, 5694, 5695, 5696, 5697, 5698, 5699, 5700, 5701, 5702, 5703, 5704, 5705, 5706, 5707, 5708, 5709, 5710, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719, 5720, 5721, 5722, 5723, 5724, 5725, 5726, 5727, 5728, 5729, 5730, 5731, 5732, 5733, 5734, 5735, 5736, 5737, 5738, 5739, 5740, 5741, 5742, 5743, 5744, 0, 5745, 5746, 5747, 5748, 5749, 5750, 0, 5751, 5752, 5753, 5754, 5755, 5756, 5757, 5758, 5759, 5760, 5761, 5762, 5763, 5764, 5765, 5766, 5767, 5768, 5769, 5770, 0, 5771, 5772, 5773, 5774, 5775, 5776, 5777, 5778, 5779, 5780, 5781, 5782, 5783, 5784, 5785, 5786, 5787, 5788, 5789, 5790, 5791, 5792, 5793, 5794, 5795, 5796, 5797, 5798, 5799, 5800, 0, 5801, 5802, 5803, 5804, 5805, 0, 5806, 5807, 5808, 5809, 5810, 5811, 5812, 0, 5813, 5814, 5815, 5816, 5817, 5818, 5819, 5820, 5821, 5822, 5823, 5824, 5825, 5826, 5827, 5828, 5829, 5830, 5831, 5832, 5833, 5834, 5835, 0, 5836, 5837, 5838, 5839, 5840, 5841, 5842, 5843, 5844, 5845, 5846, 5847, 5848, 5849, 5850, 5851, 5852, 5853, 5854, 5855, 5856, 5857, 5858, 5859, 5860, 5861, 5862, 5863, 5864, 5865, 5866, 5867, 5868, 5869, 5870, 5871, 5872, 5873, 5874, 5875, 5876, 5877, 5878, 5879, 5880, 5881, 5882, 5883, 5884, 5885, 5886, 5887, 5888, 5889, 5890, 5891, 5892, 5893, 5894, 5895, 5896, 5897, 5898, 5899, 5900, 5901, 5902, 5903, 5904, 5905, 5906, 5907, 5908, 5909, 5910, 5911, 5912, 5913, 5914, 5915, 5916, 5917, 5918, 5919, 5920, 5921, 5922, 5923, 5924, 5925, 5926, 5927, 5928, 5929, 5930, 5931, 5932, 5933, 5934, 5935, 5936, 5937, 5938, 5939, 5940, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 5950, 5951, 5952, 5953, 5954, 5955, 5956, 5957, 5958, 5959, 5960, 5961, 5962, 5963, 5964, 5965, 5966, 5967, 5968, 5969, 5970, 5971, 5972, 5973, 5974, 5975, 5976, 5977, 5978, 0, 5979, 5980, 5981, 5982, 5983, 5984, 0, 5985, 5986, 5987, 5988, 5989, 5990, 5991, 0, 5992, 5993, 5994, 5995, 5996, 5997, 5998, 5999, 6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6028, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6036, 6037, 6038, 6039, 6040, 6041, 6042, 6043, 6044, 6045, 6046, 6047, 6048, 6049, 6050, 6051, 6052, 6053, 6054, 6055, 6056, 6057, 6058, 6059, 6060, 6061, 6062, 6063, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081, 6082, 6083, 6084, 6085, 6086, 6087, 6088, 6089, 6090, 6091, 6092, 6093, 6094, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6102, 6103, 6104, 6105, 6106, 6107, 6108, 6109, 6110, 6111, 6112, 6113, 6114, 6115, 6116, 6117, 6118, 6119, 6120, 6121, 6122, 6123, 6124, 6125, 6126, 6127, 6128, 6129, 6130, 6131, 6132, 6133, 6134, 6135, 6136, 6137, 6138, 6139, 6140, 6141, 6142, 6143, 6144, 6145, 6146, 6147, 6148, 6149, 0, 6150, 6151, 0 , 0 ];
static _lexer_nfa_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _lexer_nfa_offsets: [i8 ; 812] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _lexer_nfa_push_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _lexer_nfa_pop_trans: [i8 ; 3] = [ 0, 0 , 0 ];
static lexer_start : i32 = 135;
static lexer_error : i32 = 0;
pub static lexer_en_interp_words : i32 = 144;
pub static lexer_en_interp_string : i32 = 200;
pub static lexer_en_plain_words : i32 = 255;
pub static lexer_en_plain_string : i32 = 258;
pub static lexer_en_interp_backslash_delimited : i32 = 260;
pub static lexer_en_plain_backslash_delimited : i32 = 264;
pub static lexer_en_interp_backslash_delimited_words : i32 = 265;
pub static lexer_en_plain_backslash_delimited_words : i32 = 270;
pub static lexer_en_regexp_modifiers : i32 = 272;
pub static lexer_en_expr_variable : i32 = 274;
pub static lexer_en_expr_fname : i32 = 279;
pub static lexer_en_expr_endfn : i32 = 392;
pub static lexer_en_expr_dot : i32 = 399;
pub static lexer_en_expr_arg : i32 = 420;
pub static lexer_en_expr_cmdarg : i32 = 451;
pub static lexer_en_expr_endarg : i32 = 457;
pub static lexer_en_expr_mid : i32 = 465;
pub static lexer_en_expr_beg : i32 = 489;
pub static lexer_en_expr_labelarg : i32 = 633;
pub static lexer_en_expr_value : i32 = 640;
pub static lexer_en_expr_end : i32 = 648;
pub static lexer_en_leading_dot : i32 = 807;
pub static lexer_en_line_begin : i32 = 135;
pub struct Lexer {
	input: String,
	
	// ragel
	pub cs: i32,
	p: i32,
	pe: i32,
	ts: i32,
	te: i32,
	tm: i32,
	act: i32,
	stack: [i32; 16],
	top: i32,
	
	pub cond: StackState,
	pub cmdarg: StackState,
	// TODO
	// @cond_stack   = []
	// @cmdarg_stack = []
	
	// # Lexer state:
	// @token_queue   = []
	// @literal_stack = []
	tokens: Rc<RefCell<Vec<Token>>>,
	pub literal_stack: Vec<RefCell<Literal>>,
	
	// @eq_begin_s    = nil # location of last encountered =begin
	// @sharp_s       = nil # location of last encountered #
	
	// @newline_s     = nil # location of last encountered newline
	
	// @num_base      = nil # last numeric base
	// @num_digits_s  = nil # starting position of numeric digits
	// @num_suffix_s  = nil # starting position of numeric suffix
	// @num_xfrm      = nil # numeric suffix-induced transformation
	// TODO Do we need Optional for these values?
	num_base: usize,
	num_digits_s: i32,
	num_suffix_s: i32,
	
	// @escape_s      = nil # starting position of current sequence
	// @escape        = nil # last escaped sequence, as string
	
	// @herebody_s    = nil # starting position of current heredoc line
	
	// # Ruby 1.9 ->() lambdas emit a distinct token if do/{ is
	// # encountered after a matching closing parenthesis.
	// @paren_nest    = 0
	paren_nest: usize,
	// @lambda_stack  = [],
	lambda_stack: Vec<usize>,
	
	// # After encountering the closing line of <<~SQUIGGLY_HEREDOC,
	// # we store the indentation level and give it out to the parser
	// # on request. It is not possible to infer indentation level just
	// # from the AST because escape sequences such as `\ ` or `\t` are
	// # expanded inside the lexer, but count as non-whitespace for
	// # indentation purposes.
	// @dedent_level  = nil
	
	// # If the lexer is in `command state' (aka expr_value)
	// # at the entry to #advance, it will transition to expr_cmdarg
	// # instead of expr_arg at certain points.
	// @command_state = false
	command_state: bool,
}

impl Lexer {
	pub fn new(input: String) -> Lexer {
		// %% write init;
		let cs = ( lexer_start ) as i32;
		let top=0;
		let ts=0;
		let te=0;
		let act=0;
		
		let tm=0;
		let pe = input.len() as i32;
		let stack = [0; 16];
		
		Lexer {
			input,
			
			cs, ts, te, tm,
			stack, top,
			p: 0,
			pe,
			act,
			
			cond: StackState::new(),
			cmdarg: StackState::new(),
			
			tokens: Rc::new(RefCell::new(vec![])),
			literal_stack: vec![],
			
			num_base: 0,
			num_digits_s: 0,
			num_suffix_s: 0,
			
			paren_nest: 0,
			lambda_stack: vec![],
			
			command_state: false,
		}
	}
	
	// TODO DOC
	// return a Token
	#[allow(unused_parens, unused_assignments, unused_variables)]
	pub fn advance(&mut self) -> Option<Token> {
		println!("---\nlexer.advance");
		
		if !self.tokens.borrow().is_empty() { return Some(self.tokens.borrow_mut().remove(0)); }
		
		// TODO MAJOR utf8 uncompatible
		let _input = self.input.clone();
		let data = _input.as_bytes();
		
		// TODO macro
		let mut p = self.p;
		let mut pe = self.pe;
		let mut ts = self.ts;
		let mut te = self.te;
		let mut tm = self.tm;
		let mut act = self.act;
		let mut stack = self.stack;
		let mut top = self.top;
		
		// NOTE
		// pe - Data end pointer.
		// This should be initialized to p plus the data length on every run of the machine.
		// In Go, Java and Ruby code this should be initialized to the data length.
		// Seems like rust is same with ruby, since they're languages without `goto`
		
		let eof = self.pe;
		
		// @command_state = (@cs == klass.lex_en_expr_value ||
		//                   @cs == klass.lex_en_line_begin)
		self.command_state = ( self.cs == lexer_en_expr_value || self.cs == lexer_en_line_begin );
		
		
		{
			let mut _trans  = 0;
			let mut _have  = 0;
			let mut _cont  = 1;
			let mut _klen = 0;
			let mut _cpc = 0;
			let mut _keys :i32= 0;
			let mut _acts :i32= 0;
			let mut _nacts = 0;
			let mut _cekeys :i32= 0;
			while ( _cont == 1  )
			{
			
				if ( (self.cs) == 0  ) {
					_cont = 0;
					
				}
				_have = 0;
				if ( p == pe  ) {
					{
						if ( p == eof  ) {
							{
								let mut _eofcont  = 0;
								if ( _lexer_eof_cond_spaces[((self.cs)) as usize]!= -1  ) {
									{
										_cekeys = ( _lexer_eof_cond_key_offs[((self.cs)) as usize] ) as i32;
										_klen = ( _lexer_eof_cond_key_lens[((self.cs)) as usize] ) as i32;
										_cpc = 0;
										{
											let mut _lower  :i32= _cekeys;
											let mut _upper  :i32= _cekeys + _klen - 1;
											let mut _mid :i32= 0;
											while ( _eofcont == 0 && _lower <= _upper  )
											{
												_mid = _lower + ((_upper-_lower) >> 1);
												if ( _cpc < ( _lexer_eof_cond_keys[(_mid ) as usize]
												) as i32 ) {
													_upper = _mid - 1;
													
												}
												else if ( _cpc > ( _lexer_eof_cond_keys[(_mid ) as usize]
												) as i32 ) {
													_lower = _mid + 1;
													
												}
												else {
													{
														_eofcont = 1;
													}
													
												}
											}
											
											if ( _eofcont == 0  ) {
												{
													(self.cs) = 0;
												}
												
											}
										}
									}
									
								}
								else {
									{ _eofcont = 1;
									}
									
								}
								if ( _eofcont == 1  ) {
									{
									}
									
								}
								if ( _eofcont == 1  ) {
									{
										if ( _lexer_eof_trans[((self.cs)) as usize]> 0  ) {
											{
												_trans = ( _lexer_eof_trans[((self.cs)) as usize] ) as u32- 1;
												_have = 1;
											}
											
										}
									}
									
								}
							}
							
						}
						if ( _have == 0  ) {
							_cont = 0;
							
						}
					}
					
				}
				if ( _cont == 1  ) {
					{
						if ( _have == 0  ) {
							{
								_acts = ( _lexer_from_state_actions[((self.cs)) as usize] ) as i32;
								_nacts = ( _lexer_actions[(_acts ) as usize]
								) as u32;
								_acts += 1;
								while ( _nacts > 0  )
								{
									match ( _lexer_actions[(_acts ) as usize]
									) {
										54  => {
											{{ts = p;
												}}
											
										}
										
										_ => {}
									}
									_nacts -= 1;
									_acts += 1;
								}
								
								
								_keys = ( _lexer_key_offsets[((self.cs)) as usize] ) as i32;
								_trans = ( _lexer_index_offsets[((self.cs)) as usize] ) as u32;
								_have = 0;
								_klen = ( _lexer_single_lengths[((self.cs)) as usize] ) as i32;
								if ( _klen > 0  ) {
									{
										let mut _lower  :i32= _keys;
										let mut _upper  :i32= _keys + _klen - 1;
										let mut _mid :i32= 0;
										while ( _upper >= _lower && _have == 0  )
										{
											_mid = _lower + ((_upper-_lower) >> 1);
											if ( ( data[(p ) as usize]
											) < _lexer_trans_keys[(_mid ) as usize]
											) {
												_upper = _mid - 1;
												
											}
											else if ( ( data[(p ) as usize]
											) > _lexer_trans_keys[(_mid ) as usize]
											) {
												_lower = _mid + 1;
												
											}
											else {
												{
													_trans += ( (_mid - _keys) ) as u32;
													_have = 1;
												}
												
											}
										}
										
										if ( _have == 0  ) {
											{
												_keys += _klen;
												_trans += ( _klen ) as u32;
											}
											
										}
									}
									
									
								}
								if ( _have == 0  ) {
									{
										_klen = ( _lexer_range_lengths[((self.cs)) as usize] ) as i32;
										if ( _klen > 0  ) {
											{
												let mut _lower  :i32= _keys;
												let mut _mid :i32= 0;
												let mut _upper  :i32= _keys + (_klen<<1) - 2;
												while ( _have == 0 && _lower <= _upper  )
												{
													_mid = _lower + (((_upper-_lower) >> 1) & !1
													);
													if ( ( data[(p ) as usize]
													) < _lexer_trans_keys[(_mid ) as usize]
													) {
														_upper = _mid - 2;
														
													}
													else if ( ( data[(p ) as usize]
													) > _lexer_trans_keys[(_mid + 1 ) as usize]
													) {
														_lower = _mid + 2;
														
													}
													else {
														{
															_trans += ( ((_mid - _keys)>>1) ) as u32;
															_have = 1;
														}
														
													}
												}
												
												if ( _have == 0  ) {
													_trans += ( _klen ) as u32;
													
												}
											}
											
										}
									}
									
									
								}
							}
							
						}
						if ( _cont == 1  ) {
							{
								(self.cs) = ( _lexer_cond_targs[(_trans) as usize] ) as i32;
								if ( _lexer_cond_actions[(_trans) as usize]!= 0  ) {
									{
										_acts = ( _lexer_cond_actions[(_trans) as usize] ) as i32;
										_nacts = ( _lexer_actions[(_acts ) as usize]
										) as u32;
										_acts += 1;
										while ( _nacts > 0  )
										{
											match ( _lexer_actions[(_acts ) as usize]
											) {
												0  => {
													{panic!("UNIMPL");
														// # Record position of a newline for precise location reporting on tNL
														// # tokens.
														// #
														// # This action is embedded directly into c_nl, as it is idempotent and
														// # there are no cases when we need to skip it.
														// @newline_s = p
													}
													
												}
												1  => {
													{}
													
												}
												2  => {
													{}
													
												}
												3  => {
													{}
													
												}
												4  => {
													{}
													
												}
												5  => {
													{}
													
												}
												6  => {
													{}
													
												}
												7  => {
													{}
													
												}
												8  => {
													{}
													
												}
												9  => {
													{}
													
												}
												10  => {
													{}
													
												}
												11  => {
													{}
													
												}
												12  => {
													{}
													
												}
												13  => {
													{}
													
												}
												14  => {
													{}
													
												}
												15  => {
													{}
													
												}
												16  => {
													{}
													
												}
												17  => {
													{}
													
												}
												18  => {
													{}
													
												}
												19  => {
													{}
													
												}
												20  => {
													{}
													
												}
												21  => {
													{}
													
												}
												22  => {
													{}
													
												}
												23  => {
													{}
													
												}
												24  => {
													{}
													
												}
												25  => {
													{panic!("UNIMPL");
														// # After every heredoc was parsed, @herebody_s contains the
														// # position of next token after all heredocs.
														// if @herebody_s
														//   p = @herebody_s
														//   @herebody_s = nil
														// end
													}
													
												}
												26  => {
													{self.cond.push(false); self.cmdarg.push(false);
														
														if let Some(literal) = self.literal_stack.last() {
															let mut literal = literal.borrow_mut();
															
															literal.start_interp_brace()
														}
													}
													
												}
												27  => {
													{let literal_stack_is_empty = self.literal_stack.is_empty();
														if !literal_stack_is_empty {
															let mut literal = self.literal_stack.last().unwrap().borrow_mut().clone();
															if !literal.end_interp_brace_and_try_closing() {
																// IGNORED ruby1819
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DEND;
																	self.emit(token);
																}
																
																
																// TODO herebody
																
																{p = p - 1;
																}
																{(self.cs) = (self.next_state_for_literal(&literal));
																}
																{p+= 1;
																	_cont = 0;
																}
															}
														}
													}
													
												}
												28  => {
													{panic!("UNIMPL");
														// @sharp_s = p - 1
													}
													
												}
												29  => {
													{panic!("UNIMPL");
														// emit_comment(@sharp_s, p == pe ? p - 2 : p)
													}
													
												}
												30  => {
													{tm = p }
													
												}
												31  => {
													{tm = p - 2 }
													
												}
												32  => {
													{tm = p }
													
												}
												33  => {
													{tm = p - 2 }
													
												}
												34  => {
													{tm = p - 2 }
													
												}
												35  => {
													{tm = p - 2 }
													
												}
												36  => {
													{tm = p - 3 }
													
												}
												37  => {
													{tm = p - 2 }
													
												}
												38  => {
													{tm = p - 2 }
													
												}
												39  => {
													{self.cond.push(false); self.cmdarg.push(false);
													}
													
												}
												40  => {
													{self.cond.push(false); self.cmdarg.push(false);
														
														self.paren_nest += 1;
													}
													
												}
												41  => {
													{self.paren_nest -= 1;
													}
													
												}
												42  => {
													{tm = p }
													
												}
												43  => {
													{tm = p }
													
												}
												44  => {
													{tm = p }
													
												}
												45  => {
													{self.num_base = 16; self.num_digits_s = p }
													
												}
												46  => {
													{self.num_base = 10; self.num_digits_s = p }
													
												}
												47  => {
													{self.num_base = 8;  self.num_digits_s = p }
													
												}
												48  => {
													{self.num_base = 2;  self.num_digits_s = p }
													
												}
												49  => {
													{self.num_base = 10; self.num_digits_s = ts }
													
												}
												50  => {
													{self.num_base = 8;  self.num_digits_s = ts }
													
												}
												51  => {
													{self.num_suffix_s = p }
													
												}
												52  => {
													{tm = p }
													
												}
												55  => {
													{{te = p+1;
														}}
													
												}
												56  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut();
																literal.flush_string();
																literal.extend_content();
																
																// TODO heredoc
																
																panic!("WIP");
															}
														}}
													
												}
												57  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 274;
																}}
														}}
													
												}
												58  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												59  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												60  => {
													{{te = p;
															p = p - 1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 274;
																}}
														}}
													
												}
												61  => {
													{{te = p;
															p = p - 1;
															{panic!("UNIMPL");
																
																// TODO
																// current_literal = literal
																// # Get the first character after the backslash.
																// escaped_char = @source_buffer.slice(@escape_s).chr
																
																// if current_literal.munge_escape? escaped_char
																//   # If this particular literal uses this character as an opening
																//   # or closing delimiter, it is an escape sequence for that
																//   # particular character. Write it without the backslash.
																
																//   if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
																//     # Regular expressions should include escaped delimiters in their
																//     # escaped form, except when the escaped character is
																//     # a closing delimiter but not a regexp metacharacter.
																//     #
																//     # The backslash itself cannot be used as a closing delimiter
																//     # at the same time as an escape symbol, but it is always munged,
																//     # so this branch also executes for the non-closing-delimiter case
																//     # for the backslash.
																//     current_literal.extend_string(tok, @ts, @te)
																//   else
																//     current_literal.extend_string(escaped_char, @ts, @te)
																//   end
																// else
																//   # It does not. So this is an actual escape sequence, yay!
																//   if current_literal.regexp?
																//     # Regular expressions should include escape sequences in their
																//     # escaped form. On the other hand, escaped newlines are removed.
																//     current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//   elsif current_literal.heredoc? && escaped_char == "\n".freeze
																//     if current_literal.squiggly_heredoc?
																//       # Squiggly heredocs like
																//       #   <<~-HERE
																//       #     1\
																//       #     2
																//       #   HERE
																//       # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
																//       # This information is emitted as is, without escaping,
																//       # later this escape sequence (\\n) gets handled manually in the Lexer::Dedenter
																//       current_literal.extend_string(tok, @ts, @te)
																//     else
																//       # Plain heredocs also parse \\n as a line continuation,
																//       # but they don't need to know that there was originally a newline in the
																//       # code, so we escape it and emit as "  1  2\n"
																//       current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//     end
																//   else
																//     current_literal.extend_string(@escape || tok, @ts, @te)
																//   end
																// end
															}
														}}
													
												}
												62  => {
													{{te = p;
															p = p - 1;
															{self.literal_stack.last().unwrap().borrow_mut().extend_space(ts, te);
															}
														}}
													
												}
												63  => {
													{{te = p;
															p = p - 1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												64  => {
													{{p = ((te))-1;
															{panic!("UNIMPL");
																
																// TODO
																// current_literal = literal
																// # Get the first character after the backslash.
																// escaped_char = @source_buffer.slice(@escape_s).chr
																
																// if current_literal.munge_escape? escaped_char
																//   # If this particular literal uses this character as an opening
																//   # or closing delimiter, it is an escape sequence for that
																//   # particular character. Write it without the backslash.
																
																//   if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
																//     # Regular expressions should include escaped delimiters in their
																//     # escaped form, except when the escaped character is
																//     # a closing delimiter but not a regexp metacharacter.
																//     #
																//     # The backslash itself cannot be used as a closing delimiter
																//     # at the same time as an escape symbol, but it is always munged,
																//     # so this branch also executes for the non-closing-delimiter case
																//     # for the backslash.
																//     current_literal.extend_string(tok, @ts, @te)
																//   else
																//     current_literal.extend_string(escaped_char, @ts, @te)
																//   end
																// else
																//   # It does not. So this is an actual escape sequence, yay!
																//   if current_literal.regexp?
																//     # Regular expressions should include escape sequences in their
																//     # escaped form. On the other hand, escaped newlines are removed.
																//     current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//   elsif current_literal.heredoc? && escaped_char == "\n".freeze
																//     if current_literal.squiggly_heredoc?
																//       # Squiggly heredocs like
																//       #   <<~-HERE
																//       #     1\
																//       #     2
																//       #   HERE
																//       # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
																//       # This information is emitted as is, without escaping,
																//       # later this escape sequence (\\n) gets handled manually in the Lexer::Dedenter
																//       current_literal.extend_string(tok, @ts, @te)
																//     else
																//       # Plain heredocs also parse \\n as a line continuation,
																//       # but they don't need to know that there was originally a newline in the
																//       # code, so we escape it and emit as "  1  2\n"
																//       current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//     end
																//   else
																//     current_literal.extend_string(@escape || tok, @ts, @te)
																//   end
																// end
															}
														}}
													
												}
												65  => {
													{{p = ((te))-1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												66  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut();
																literal.flush_string();
																literal.extend_content();
																
																// TODO heredoc
																
																panic!("WIP");
															}
														}}
													
												}
												67  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 274;
																}}
														}}
													
												}
												68  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												69  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												70  => {
													{{te = p;
															p = p - 1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 274;
																}}
														}}
													
												}
												71  => {
													{{te = p;
															p = p - 1;
															{panic!("UNIMPL");
																
																// TODO
																// current_literal = literal
																// # Get the first character after the backslash.
																// escaped_char = @source_buffer.slice(@escape_s).chr
																
																// if current_literal.munge_escape? escaped_char
																//   # If this particular literal uses this character as an opening
																//   # or closing delimiter, it is an escape sequence for that
																//   # particular character. Write it without the backslash.
																
																//   if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
																//     # Regular expressions should include escaped delimiters in their
																//     # escaped form, except when the escaped character is
																//     # a closing delimiter but not a regexp metacharacter.
																//     #
																//     # The backslash itself cannot be used as a closing delimiter
																//     # at the same time as an escape symbol, but it is always munged,
																//     # so this branch also executes for the non-closing-delimiter case
																//     # for the backslash.
																//     current_literal.extend_string(tok, @ts, @te)
																//   else
																//     current_literal.extend_string(escaped_char, @ts, @te)
																//   end
																// else
																//   # It does not. So this is an actual escape sequence, yay!
																//   if current_literal.regexp?
																//     # Regular expressions should include escape sequences in their
																//     # escaped form. On the other hand, escaped newlines are removed.
																//     current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//   elsif current_literal.heredoc? && escaped_char == "\n".freeze
																//     if current_literal.squiggly_heredoc?
																//       # Squiggly heredocs like
																//       #   <<~-HERE
																//       #     1\
																//       #     2
																//       #   HERE
																//       # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
																//       # This information is emitted as is, without escaping,
																//       # later this escape sequence (\\n) gets handled manually in the Lexer::Dedenter
																//       current_literal.extend_string(tok, @ts, @te)
																//     else
																//       # Plain heredocs also parse \\n as a line continuation,
																//       # but they don't need to know that there was originally a newline in the
																//       # code, so we escape it and emit as "  1  2\n"
																//       current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//     end
																//   else
																//     current_literal.extend_string(@escape || tok, @ts, @te)
																//   end
																// end
															}
														}}
													
												}
												72  => {
													{{te = p;
															p = p - 1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												73  => {
													{{p = ((te))-1;
															{panic!("UNIMPL");
																
																// TODO
																// current_literal = literal
																// # Get the first character after the backslash.
																// escaped_char = @source_buffer.slice(@escape_s).chr
																
																// if current_literal.munge_escape? escaped_char
																//   # If this particular literal uses this character as an opening
																//   # or closing delimiter, it is an escape sequence for that
																//   # particular character. Write it without the backslash.
																
																//   if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
																//     # Regular expressions should include escaped delimiters in their
																//     # escaped form, except when the escaped character is
																//     # a closing delimiter but not a regexp metacharacter.
																//     #
																//     # The backslash itself cannot be used as a closing delimiter
																//     # at the same time as an escape symbol, but it is always munged,
																//     # so this branch also executes for the non-closing-delimiter case
																//     # for the backslash.
																//     current_literal.extend_string(tok, @ts, @te)
																//   else
																//     current_literal.extend_string(escaped_char, @ts, @te)
																//   end
																// else
																//   # It does not. So this is an actual escape sequence, yay!
																//   if current_literal.regexp?
																//     # Regular expressions should include escape sequences in their
																//     # escaped form. On the other hand, escaped newlines are removed.
																//     current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//   elsif current_literal.heredoc? && escaped_char == "\n".freeze
																//     if current_literal.squiggly_heredoc?
																//       # Squiggly heredocs like
																//       #   <<~-HERE
																//       #     1\
																//       #     2
																//       #   HERE
																//       # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
																//       # This information is emitted as is, without escaping,
																//       # later this escape sequence (\\n) gets handled manually in the Lexer::Dedenter
																//       current_literal.extend_string(tok, @ts, @te)
																//     else
																//       # Plain heredocs also parse \\n as a line continuation,
																//       # but they don't need to know that there was originally a newline in the
																//       # code, so we escape it and emit as "  1  2\n"
																//       current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//     end
																//   else
																//     current_literal.extend_string(@escape || tok, @ts, @te)
																//   end
																// end
															}
														}}
													
												}
												74  => {
													{{p = ((te))-1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												75  => {
													{{te = p+1;
															{panic!("UNIMPL");
																
																// TODO
																// current_literal = literal
																// # Get the first character after the backslash.
																// escaped_char = @source_buffer.slice(@escape_s).chr
																
																// if current_literal.munge_escape? escaped_char
																//   # If this particular literal uses this character as an opening
																//   # or closing delimiter, it is an escape sequence for that
																//   # particular character. Write it without the backslash.
																
																//   if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
																//     # Regular expressions should include escaped delimiters in their
																//     # escaped form, except when the escaped character is
																//     # a closing delimiter but not a regexp metacharacter.
																//     #
																//     # The backslash itself cannot be used as a closing delimiter
																//     # at the same time as an escape symbol, but it is always munged,
																//     # so this branch also executes for the non-closing-delimiter case
																//     # for the backslash.
																//     current_literal.extend_string(tok, @ts, @te)
																//   else
																//     current_literal.extend_string(escaped_char, @ts, @te)
																//   end
																// else
																//   # It does not. So this is an actual escape sequence, yay!
																//   if current_literal.regexp?
																//     # Regular expressions should include escape sequences in their
																//     # escaped form. On the other hand, escaped newlines are removed.
																//     current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//   elsif current_literal.heredoc? && escaped_char == "\n".freeze
																//     if current_literal.squiggly_heredoc?
																//       # Squiggly heredocs like
																//       #   <<~-HERE
																//       #     1\
																//       #     2
																//       #   HERE
																//       # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
																//       # This information is emitted as is, without escaping,
																//       # later this escape sequence (\\n) gets handled manually in the Lexer::Dedenter
																//       current_literal.extend_string(tok, @ts, @te)
																//     else
																//       # Plain heredocs also parse \\n as a line continuation,
																//       # but they don't need to know that there was originally a newline in the
																//       # code, so we escape it and emit as "  1  2\n"
																//       current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//     end
																//   else
																//     current_literal.extend_string(@escape || tok, @ts, @te)
																//   end
																// end
															}
														}}
													
												}
												76  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												77  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												78  => {
													{{te = p;
															p = p - 1;
															{self.literal_stack.last().unwrap().borrow_mut().extend_space(ts, te);
															}
														}}
													
												}
												79  => {
													{{te = p;
															p = p - 1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												80  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												81  => {
													{{te = p+1;
															{panic!("UNIMPL");
																
																// TODO
																// current_literal = literal
																// # Get the first character after the backslash.
																// escaped_char = @source_buffer.slice(@escape_s).chr
																
																// if current_literal.munge_escape? escaped_char
																//   # If this particular literal uses this character as an opening
																//   # or closing delimiter, it is an escape sequence for that
																//   # particular character. Write it without the backslash.
																
																//   if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
																//     # Regular expressions should include escaped delimiters in their
																//     # escaped form, except when the escaped character is
																//     # a closing delimiter but not a regexp metacharacter.
																//     #
																//     # The backslash itself cannot be used as a closing delimiter
																//     # at the same time as an escape symbol, but it is always munged,
																//     # so this branch also executes for the non-closing-delimiter case
																//     # for the backslash.
																//     current_literal.extend_string(tok, @ts, @te)
																//   else
																//     current_literal.extend_string(escaped_char, @ts, @te)
																//   end
																// else
																//   # It does not. So this is an actual escape sequence, yay!
																//   if current_literal.regexp?
																//     # Regular expressions should include escape sequences in their
																//     # escaped form. On the other hand, escaped newlines are removed.
																//     current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//   elsif current_literal.heredoc? && escaped_char == "\n".freeze
																//     if current_literal.squiggly_heredoc?
																//       # Squiggly heredocs like
																//       #   <<~-HERE
																//       #     1\
																//       #     2
																//       #   HERE
																//       # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
																//       # This information is emitted as is, without escaping,
																//       # later this escape sequence (\\n) gets handled manually in the Lexer::Dedenter
																//       current_literal.extend_string(tok, @ts, @te)
																//     else
																//       # Plain heredocs also parse \\n as a line continuation,
																//       # but they don't need to know that there was originally a newline in the
																//       # code, so we escape it and emit as "  1  2\n"
																//       current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//     end
																//   else
																//     current_literal.extend_string(@escape || tok, @ts, @te)
																//   end
																// end
															}
														}}
													
												}
												82  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												83  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												84  => {
													{{te = p;
															p = p - 1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												85  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut();
																literal.flush_string();
																literal.extend_content();
																
																// TODO heredoc
																
																panic!("WIP");
															}
														}}
													
												}
												86  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 274;
																}}
														}}
													
												}
												87  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												88  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												89  => {
													{{te = p;
															p = p - 1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 274;
																}}
														}}
													
												}
												90  => {
													{{te = p;
															p = p - 1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												91  => {
													{{p = ((te))-1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												92  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												93  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												94  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut();
																literal.flush_string();
																literal.extend_content();
																
																// TODO heredoc
																
																panic!("WIP");
															}
														}}
													
												}
												95  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 274;
																}}
														}}
													
												}
												96  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												97  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												98  => {
													{{te = p;
															p = p - 1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 274;
																}}
														}}
													
												}
												99  => {
													{{te = p;
															p = p - 1;
															{self.literal_stack.last().unwrap().borrow_mut().extend_space(ts, te);
															}
														}}
													
												}
												100  => {
													{{te = p;
															p = p - 1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												101  => {
													{{p = ((te))-1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												102  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												103  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 633;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												104  => {
													{{te = p;
															p = p - 1;
															{self.literal_stack.last().unwrap().borrow_mut().extend_space(ts, te);
															}
														}}
													
												}
												105  => {
													{{te = p+1;
															{panic!("UNIMPL");
																//   emit(:tREGEXP_OPT, tok(@ts, @te - 1), @ts, @te - 1)
																//   fhold;
																//   fgoto expr_end;
															}
														}}
													
												}
												106  => {
													{{te = p;
															p = p - 1;
															{panic!("UNIMPL");
																//   unknown_options = tok.scan(/[^imxouesn]/)
																//   if unknown_options.any?
																//     diagnostic :error, :regexp_options,
																//                 { :options => unknown_options.join }
																//   end
																// 
																//   emit(:tREGEXP_OPT)
																//   fnext expr_end;
																//   fbreak;
															}
														}}
													
												}
												107  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_GVAR(slice);
																	self.emit(token);
																}
																
																
																{
																	top -= 1;
																	let _poped_next_state = stack[top as usize];
																	{(self.cs) = (_poped_next_state);
																	}
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												108  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_GVAR(slice);
																	self.emit(token);
																}
																
																
																{
																	top -= 1;
																	let _poped_next_state = stack[top as usize];
																	{(self.cs) = (_poped_next_state);
																	}
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												109  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_CVAR(slice);
																	self.emit(token);
																}
																
																
																{
																	top -= 1;
																	let _poped_next_state = stack[top as usize];
																	{(self.cs) = (_poped_next_state);
																	}
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												110  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_IVAR(slice);
																	self.emit(token);
																}
																
																
																{
																	top -= 1;
																	let _poped_next_state = stack[top as usize];
																	{(self.cs) = (_poped_next_state);
																	}
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												111  => {
													{{act = 39;
														}}
													
												}
												112  => {
													{{act = 40;
														}}
													
												}
												113  => {
													{{act = 41;
														}}
													
												}
												114  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("KEYWORDS_BEGIN", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 392;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												115  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_IDENTIFIER(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 392;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												116  => {
													{{te = p+1;
															{p = ts - 1;
																{(self.cs) = 648;
																}{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 274;
																}}
														}}
													
												}
												117  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 392;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												118  => {
													{{te = p+1;
															{{p = p - 1;
																} {p = p - 1;
																} {(self.cs) = 648;
																}}
														}}
													
												}
												119  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// if version?(23)
																//   type, delimiter = tok[0..-2], tok[-1].chr
																//   fgoto *push_literal(type, delimiter, @ts);
																// else
																//   p = @ts - 1
																//   fgoto expr_end;
																// end
															}
														}}
													
												}
												120  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 648;
																}}
														}}
													
												}
												121  => {
													{{te = p+1;
															{}
														}}
													
												}
												122  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("KEYWORDS_BEGIN", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 392;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												123  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_CONSTANT(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 392;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												124  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_IDENTIFIER(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 392;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												125  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1;
																{(self.cs) = 648;
																}{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 274;
																}}
														}}
													
												}
												126  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 392;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												127  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 489;
																}}
														}}
													
												}
												128  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												129  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 648;
																}}
														}}
													
												}
												130  => {
													{{p = ((te))-1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 392;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												131  => {
													{{p = ((te))-1;
															{{p = p - 1;
																} {(self.cs) = 648;
																}}
														}}
													
												}
												132  => {
													{{match ( act  ) {
																39  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS_BEGIN", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 392;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																40  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			
																			let token = Token::T_CONSTANT(slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 392;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																41  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			
																			let token = Token::T_IDENTIFIER(slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 392;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																
																_ => {}
															}
														}
													}
													
												}
												133  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te - 2);
																	
																	let token = Token::T_LABEL(slice);
																	self.emit(token);
																}
																
																{p = p - 1;
																} {(self.cs) = 633;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												134  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 648;
																}}
														}}
													
												}
												135  => {
													{{te = p+1;
															{}
														}}
													
												}
												136  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												137  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 648;
																}}
														}}
													
												}
												138  => {
													{{p = ((te))-1;
															{{p = p - 1;
																} {(self.cs) = 648;
																}}
														}}
													
												}
												139  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 420;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												140  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 648;
																}}
														}}
													
												}
												141  => {
													{{te = p+1;
															{}
														}}
													
												}
												142  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_CONSTANT(slice);
																	self.emit(token);
																}
																
																{(self.cs) = (self.arg_or_cmdarg());
																} {p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												143  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_IDENTIFIER(slice);
																	self.emit(token);
																}
																
																{(self.cs) = (self.arg_or_cmdarg());
																} {p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												144  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, tm);
																	
																	let token = Token::T_FID(slice);
																	self.emit(token);
																}
																
																{(self.cs) = (self.arg_or_cmdarg());
																} p = tm - 1; {p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												145  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 420;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												146  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												147  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 648;
																}}
														}}
													
												}
												148  => {
													{{act = 67;
														}}
													
												}
												149  => {
													{{act = 68;
														}}
													
												}
												150  => {
													{{act = 73;
														}}
													
												}
												151  => {
													{{act = 74;
														}}
													
												}
												152  => {
													{{te = p+1;
															{panic!("UNIMPL");
																//   # Unlike expr_beg as invoked in the next rule, do not warn
																//   p = @ts - 1
																//   fgoto expr_end;
															}
														}}
													
												}
												153  => {
													{{te = p+1;
															{panic!("UNIMPL");
																
																//    if tok(tm, tm + 1) == '/'.freeze
																//      # Ambiguous regexp literal.
																//      diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
																//    end
																
																//    p = tm - 1
																//    fgoto expr_beg;
															}
														}}
													
												}
												154  => {
													{{te = p+1;
															{{p = p - 1;
																} {p = p - 1;
																} {(self.cs) = 489;
																}}
														}}
													
												}
												155  => {
													{{te = p+1;
															{p = ts - 1; {(self.cs) = 489;
																}}
														}}
													
												}
												156  => {
													{{te = p+1;
															{p = tm - 1; {(self.cs) = 648;
																}}
														}}
													
												}
												157  => {
													{{te = p+1;
															{p = ts - 1;
																{(self.cs) = 648;
																}}
														}}
													
												}
												158  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 489;
																}}
														}}
													
												}
												159  => {
													{{te = p+1;
															{}
														}}
													
												}
												160  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_LPAREN_ARG;
																	self.emit(token);
																}
																
																{(self.cs) = 489;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												161  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_LPAREN2;
																	self.emit(token);
																}
																
																{(self.cs) = 489;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												162  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_LBRACK;
																	self.emit(token);
																}
																
																{(self.cs) = 489;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												163  => {
													{{te = p;
															p = p - 1;
															{panic!("UNIMPL");
																// if @lambda_stack.last == @paren_nest
																//   @lambda_stack.pop
																//   emit(:tLAMBEG, '{'.freeze, @te - 1, @te)
																// else
																//   emit(:tLCURLY, '{'.freeze, @te - 1, @te)
																// end
																// fnext expr_value; fbreak;
															}
														}}
													
												}
												164  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 489;
																}}
														}}
													
												}
												165  => {
													{{te = p;
															p = p - 1;
															{panic!("UNIMPL");
																//   diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
																//               range(tm, @te)
																
																//   p = tm - 1
																//   fgoto expr_beg;
															}
														}}
													
												}
												166  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 489;
																}}
														}}
													
												}
												167  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1;
																{(self.cs) = 648;
																}}
														}}
													
												}
												168  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												169  => {
													{{te = p;
															p = p - 1;
															{{(self.cs) = 648;
																}}
														}}
													
												}
												170  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 648;
																}}
														}}
													
												}
												171  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 489;
																}}
														}}
													
												}
												172  => {
													{{p = ((te))-1;
														}}
													
												}
												173  => {
													{{p = ((te))-1;
															{{p = p - 1;
																} {(self.cs) = 489;
																}}
														}}
													
												}
												174  => {
													{{match ( act  ) {
																67  => {
																	p = ((te))-1;
																	{panic!("UNIMPL");
																		
																		//    if tok(tm, tm + 1) == '/'.freeze
																		//      # Ambiguous regexp literal.
																		//      diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
																		//    end
																		
																		//    p = tm - 1
																		//    fgoto expr_beg;
																	}
																	
																}
																68  => {
																	p = ((te))-1;
																	{panic!("UNIMPL");
																		//   diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
																		//               range(tm, @te)
																		
																		//   p = tm - 1
																		//   fgoto expr_beg;
																	}
																	
																}
																73  => {
																	p = ((te))-1;
																	{p = ts - 1;
																		{(self.cs) = 648;
																		}}
																	
																}
																_ => {
																	p = ((te))-1;
																	
																}
																
															}
														}
													}
													
												}
												175  => {
													{{act = 80;
														}}
													
												}
												176  => {
													{{act = 81;
														}}
													
												}
												177  => {
													{{te = p+1;
															{p = ts - 1;
																{(self.cs) = 420;
																}}
														}}
													
												}
												178  => {
													{{te = p+1;
															{}
														}}
													
												}
												179  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_LPAREN_ARG;
																	self.emit(token);
																}
																
																//   if version?(18)
																//     fnext expr_value; fbreak;
																//   else
																//     fnext expr_beg; fbreak;
																//   end
																// NOTE ignored ruby18
																{(self.cs) = 489;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												180  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1;
																{(self.cs) = 420;
																}}
														}}
													
												}
												181  => {
													{{p = ((te))-1;
															{p = ts - 1;
																{(self.cs) = 420;
																}}
														}}
													
												}
												182  => {
													{{match ( act  ) {
																80  => {
																	p = ((te))-1;
																	{if self.cond.is_active() {
																		
																			{
																				let slice = self.current_slice(ts, te);
																				
																				let token = Token::K_DO_COND;
																				self.emit(token);
																			}
																			
																		} else {
																		
																			{
																				let slice = self.current_slice(ts, te);
																				
																				let token = Token::K_DO;
																				self.emit(token);
																			}
																			
																		}
																		{(self.cs) = 640;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																81  => {
																	p = ((te))-1;
																	{p = ts - 1;
																		{(self.cs) = 420;
																		}}
																	
																}
																
																_ => {}
															}
														}
													}
													
												}
												183  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// TODO
																// emit_do(true)
																// fnext expr_value; fbreak;
															}
														}}
													
												}
												184  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 648;
																}}
														}}
													
												}
												185  => {
													{{te = p+1;
															{}
														}}
													
												}
												186  => {
													{{te = p;
															p = p - 1;
															{panic!("UNIMPL");
																// if @lambda_stack.last == @paren_nest
																//   @lambda_stack.pop
																//   emit(:tLAMBEG, '{'.freeze)
																// else
																//   emit(:tLBRACE_ARG, '{'.freeze)
																// end
																// fnext expr_value; fbreak;
															}
														}}
													
												}
												187  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												188  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 648;
																}}
														}}
													
												}
												189  => {
													{{act = 88;
														}}
													
												}
												190  => {
													{{act = 89;
														}}
													
												}
												191  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 489;
																}}
														}}
													
												}
												192  => {
													{{te = p+1;
															{}
														}}
													
												}
												193  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1; {(self.cs) = 489;
																}}
														}}
													
												}
												194  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												195  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 648;
																}}
														}}
													
												}
												196  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 489;
																}}
														}}
													
												}
												197  => {
													{{match ( act  ) {
																88  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 489;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																89  => {
																	p = ((te))-1;
																	{p = ts - 1; {(self.cs) = 489;
																		}}
																	
																}
																
																_ => {}
															}
														}
													}
													
												}
												198  => {
													{{act = 94;
														}}
													
												}
												199  => {
													{{act = 110;
														}}
													
												}
												200  => {
													{{act = 111;
														}}
													
												}
												201  => {
													{{act = 113;
														}}
													
												}
												202  => {
													{{act = 114;
														}}
													
												}
												203  => {
													{{act = 116;
														}}
													
												}
												204  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, ts + 1);
																	
																	let token = Token::T_UNARY_NUM(slice);
																	self.emit(token);
																}
																
																{p = p - 1;
																} {(self.cs) = 648;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												205  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// type = delimiter = tok[0].chr
																// fhold; fgoto *push_literal(type, delimiter, @ts);
															}
														}}
													
												}
												206  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// type, delimiter = @source_buffer.slice(@ts).chr, tok[-1].chr
																// fgoto *push_literal(type, delimiter, @ts);
															}
														}}
													
												}
												207  => {
													{{te = p+1;
															{let literal_type = self.current_slice(ts, te - 1);
																let literal_delimiter = self.current_slice(te - 1, te);
																let literal = Literal::new(literal_type, literal_delimiter, ts, None, false, false, false, Rc::clone(&self.tokens));
																{(self.cs) = (self.push_literal(literal));
																}
															}
														}}
													
												}
												208  => {
													{{te = p+1;
															{{p = p - 1;
																} {p = p - 1;
																}
																
																{
																	let slice = self.current_slice(ts, ts + 1);
																	
																	let token = Token::T_SYMBEG(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 279;
																}}
														}}
													
												}
												209  => {
													{{te = p+1;
															{let literal_type = self.current_slice(ts, te).clone();
																let literal_delimiter = literal_type.chars().last().unwrap().to_string();
																let literal = Literal::new(literal_type, literal_delimiter, ts, None, false, false, false, Rc::clone(&self.tokens));
																{(self.cs) = (self.push_literal(literal));
																}
															}
														}}
													
												}
												210  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts + 1, ts + 2);
																	
																	let token = Token::T_SYMBOL(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 648;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												211  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts + 1, te);
																	
																	let token = Token::T_SYMBOL(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 648;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												212  => {
													{{te = p+1;
															{panic!("lexer diagnostic: incomplete_escape");
															}
														}}
													
												}
												213  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION_BEGIN", slice);
																	self.emit(token);
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												214  => {
													{{te = p+1;
															{{p = p - 1;
																}
																
																// if version?(18)
																//   ident = tok(@ts, @te - 2)
																// 
																//   emit((@source_buffer.slice(@ts) =~ /[A-Z]/) ? :tCONSTANT : :tIDENTIFIER,
																//         ident, @ts, @te - 2)
																//   fhold; # continue as a symbol
																// 
																//   if !@static_env.nil? && @static_env.declared?(ident)
																//     fnext expr_end;
																//   else
																//     fnext *arg_or_cmdarg;
																//   end
																// else
																//   emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
																//   fnext expr_labelarg;
																// end
																
																// NOTE ignored ruby18
																
																{
																	let slice = self.current_slice(ts, te - 2);
																	
																	let token = Token::T_LABEL(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 633;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												215  => {
													{{te = p+1;
															{p = ts - 1; {(self.cs) = 648;
																}}
														}}
													
												}
												216  => {
													{{te = p+1;
															{}
														}}
													
												}
												217  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, ts + 1);
																	
																	let token = Token::T_UNARY_NUM(slice);
																	self.emit(token);
																}
																
																{p = p - 1;
																} {(self.cs) = 648;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												218  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STAR;
																	self.emit(token);
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												219  => {
													{{te = p;
															p = p - 1;
															{let literal_type = self.current_slice(ts, te - 1);
																let literal_delimiter = self.current_slice(te - 1, te);
																let literal = Literal::new(literal_type, literal_delimiter, ts, None, false, false, false, Rc::clone(&self.tokens));
																{(self.cs) = (self.push_literal(literal));
																}
															}
														}}
													
												}
												220  => {
													{{te = p;
															p = p - 1;
															{panic!("lexer diagnostic: string_eof");
															}
														}}
													
												}
												221  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts + 1, tm);
																	
																	let token = Token::T_SYMBOL(slice);
																	self.emit(token);
																}
																
																p = tm - 1;
																{(self.cs) = 648;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												222  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts + 1, te);
																	
																	let token = Token::T_SYMBOL(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 648;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												223  => {
													{{te = p;
															p = p - 1;
															{panic!("lexer diagnostic: incomplete_escape");
															}
														}}
													
												}
												224  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1;
																{(self.cs) = 648;
																}}
														}}
													
												}
												225  => {
													{{te = p;
															p = p - 1;
															{if !self.lambda_stack.is_empty() && self.lambda_stack.last().unwrap() == &self.paren_nest {
																	self.lambda_stack.pop();
																	
																	{
																		let slice = self.current_slice(ts, te);
																		
																		let token = Token::T_LAMBEG;
																		self.emit(token);
																	}
																	
																} else {
																
																	{
																		let slice = self.current_slice(ts, te);
																		
																		let token = Token::T_LBRACE;
																		self.emit(token);
																	}
																	
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												226  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_LBRACK;
																	self.emit(token);
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												227  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_LPAREN;
																	self.emit(token);
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												228  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION_BEGIN", slice);
																	self.emit(token);
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												229  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1;
																{(self.cs) = 648;
																}}
														}}
													
												}
												230  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_IDENTIFIER(slice);
																	self.emit(token);
																}
																
																
																// TODO WIP
																// if !@static_env.nil? && @static_env.declared?(tok)
																//   fnext expr_endfn; fbreak;
																// else
																//   fnext *arg_or_cmdarg; fbreak;
																// end
																{(self.cs) = (self.arg_or_cmdarg());
																} {p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												231  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												232  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1; {(self.cs) = 648;
																}}
														}}
													
												}
												233  => {
													{{p = ((te))-1;
															{panic!("lexer diagnostic: string_eof");
															}
														}}
													
												}
												234  => {
													{{p = ((te))-1;
															{panic!("lexer diagnostic: incomplete_escape");
															}
														}}
													
												}
												235  => {
													{{p = ((te))-1;
															{p = ts - 1; {(self.cs) = 648;
																}}
														}}
													
												}
												236  => {
													{{match ( act  ) {
																94  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, ts + 1);
																			
																			let token = Token::T_UNARY_NUM(slice);
																			self.emit(token);
																		}
																		
																		{p = p - 1;
																		} {(self.cs) = 648;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																110  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("PUNCTUATION_BEGIN", slice);
																			self.emit(token);
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																111  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS_BEGIN", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 640;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																113  => {
																	p = ((te))-1;
																	{p = ts - 1;
																		{(self.cs) = 648;
																		}}
																	
																}
																114  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			
																			let token = Token::T_IDENTIFIER(slice);
																			self.emit(token);
																		}
																		
																		
																		// TODO WIP
																		// if !@static_env.nil? && @static_env.declared?(tok)
																		//   fnext expr_endfn; fbreak;
																		// else
																		//   fnext *arg_or_cmdarg; fbreak;
																		// end
																		{(self.cs) = (self.arg_or_cmdarg());
																		} {p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																116  => {
																	p = ((te))-1;
																	{p = ts - 1; {(self.cs) = 648;
																		}}
																	
																}
																
																_ => {}
															}
														}
													}
													
												}
												237  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 489;
																}}
														}}
													
												}
												238  => {
													{{te = p+1;
															{}
														}}
													
												}
												239  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												240  => {
													{{te = p;
															p = p - 1;
															{panic!("UNIMPL");
																// TODO
																// if @in_kwarg
																//   fhold; fgoto expr_end;
																// else
																//   fgoto line_begin;
																// end
															}
														}}
													
												}
												241  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 489;
																}}
														}}
													
												}
												242  => {
													{{te = p+1;
															{p = ts - 1;
																{(self.cs) = 648;
																}}
														}}
													
												}
												243  => {
													{{te = p+1;
															{let literal = Literal::new(self.current_slice(ts,te), self.current_slice(ts,te), ts, None, false, false, false, Rc::clone(&self.tokens));
																
																{(self.cs) = (self.push_literal(literal));
																}
															}
														}}
													
												}
												244  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 489;
																}}
														}}
													
												}
												245  => {
													{{te = p+1;
															{}
														}}
													
												}
												246  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												247  => {
													{{te = p;
															p = p - 1;
															{{(self.cs) = 135;
																}}
														}}
													
												}
												248  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 489;
																}}
														}}
													
												}
												249  => {
													{{p = ((te))-1;
															{{p = p - 1;
																} {(self.cs) = 489;
																}}
														}}
													
												}
												250  => {
													{{act = 128;
														}}
													
												}
												251  => {
													{{act = 129;
														}}
													
												}
												252  => {
													{{act = 130;
														}}
													
												}
												253  => {
													{{act = 131;
														}}
													
												}
												254  => {
													{{act = 132;
														}}
													
												}
												255  => {
													{{act = 133;
														}}
													
												}
												256  => {
													{{act = 136;
														}}
													
												}
												257  => {
													{{act = 140;
														}}
													
												}
												258  => {
													{{act = 142;
														}}
													
												}
												259  => {
													{{act = 143;
														}}
													
												}
												260  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																	self.emit(token);
																}
																
																
																//   if version?(18) && tok == 'not'.freeze
																//     fnext expr_beg; fbreak;
																//   else
																//     fnext expr_arg; fbreak;
																//   end
																// NOTE ignored ruby18
																{(self.cs) = 420;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												261  => {
													{{te = p+1;
															{let literal_type = self.current_slice(ts, te);
																let literal_delimiter = self.current_slice(te - 1, te);
																let literal = Literal::new(literal_type, literal_delimiter, ts, None, false, false, false, Rc::clone(&self.tokens));
																{(self.cs) = (self.push_literal(literal));
																}
															}
														}}
													
												}
												262  => {
													{{te = p+1;
															{p = ts - 1; {stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 274;
																}}
														}}
													
												}
												263  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 399;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												264  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 640;
																}}
														}}
													
												}
												265  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 640;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												266  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																
																// NOTE ignored ruby24
																// if @version < 24
																//   @cond.lexpop
																//   @cmdarg.lexpop
																// else
																//   @cond.pop
																//   @cmdarg.pop
																// end
																self.cond.pop();
																self.cmdarg.pop();
																
																// TODO WIP
																// if tok == '}'.freeze || tok == ']'.freeze
																//   if @version >= 25
																//     fnext expr_end;
																//   else
																//     fnext expr_endarg;
																//   end
																// else # )
																//   # fnext expr_endfn; ?
																// end
																{(self.cs) = 648;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												267  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te - 1);
																	
																	let token = Token::T_OP_ASGN(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 489;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												268  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_EH;
																	self.emit(token);
																}
																
																{(self.cs) = 640;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												269  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 489;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												270  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_SEMI;
																	self.emit(token);
																}
																
																{(self.cs) = 640;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												271  => {
													{{te = p+1;
															{panic!("lexer diagnostic: unexpected char: {}", self.current_slice(ts, te)); // TODO char position
															}
														}}
													
												}
												272  => {
													{{te = p+1;
															{}
														}}
													
												}
												273  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 279;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												274  => {
													{{te = p;
															p = p - 1;
															{let digits = self.current_slice(self.num_digits_s, self.num_suffix_s);
																
																// if digits.end_with? '_'.freeze
																//   diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
																//               range(@te - 1, @te)
																// elsif digits.empty? && @num_base == 8 && version?(18)
																//   # 1.8 did not raise an error on 0o.
																//   digits = '0'.freeze
																// elsif digits.empty?
																//   diagnostic :error, :empty_numeric
																// elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
																//   invalid_s = @num_digits_s + invalid_idx
																//   diagnostic :error, :invalid_octal, nil,
																//               range(invalid_s, invalid_s + 1)
																// end
																// 
																// if version?(18, 19, 20)
																//   emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
																//   p = @num_suffix_s - 1
																// else
																//   @num_xfrm.call(digits.to_i(@num_base))
																// end
																// fbreak;
																
																let token = Token::T_INTEGER(digits.parse::<isize>().unwrap());
																self.emit(token);
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												275  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_CONSTANT(slice);
																	self.emit(token);
																}
																
																{(self.cs) = (self.arg_or_cmdarg());
																} {p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												276  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, tm);
																	
																	let token = Token::T_CONSTANT(slice);
																	self.emit(token);
																}
																
																p = tm - 1;
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												277  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1; {stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 274;
																}}
														}}
													
												}
												278  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 399;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												279  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_IDENTIFIER(slice);
																	self.emit(token);
																}
																
																
																// TODO WIP
																// if !@static_env.nil? && @static_env.declared?(tok)
																//   fnext expr_endfn; fbreak;
																// else
																//   fnext *arg_or_cmdarg; fbreak;
																// end
																{(self.cs) = (self.arg_or_cmdarg());
																} {p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												280  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 640;
																}}
														}}
													
												}
												281  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 640;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												282  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 489;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												283  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																
																// NOTE ignored ruby24
																// if @version < 24
																//   @cond.lexpop
																//   @cmdarg.lexpop
																// else
																//   @cond.pop
																//   @cmdarg.pop
																// end
																self.cond.pop();
																self.cmdarg.pop();
																
																// TODO WIP
																// if tok == '}'.freeze || tok == ']'.freeze
																//   if @version >= 25
																//     fnext expr_end;
																//   else
																//     fnext expr_endarg;
																//   end
																// else # )
																//   # fnext expr_endfn; ?
																// end
																{(self.cs) = 648;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												284  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_LBRACK2;
																	self.emit(token);
																}
																
																{(self.cs) = 489;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												285  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 489;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												286  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												287  => {
													{{te = p;
															p = p - 1;
															{{(self.cs) = 807;
																}}
														}}
													
												}
												288  => {
													{{te = p;
															p = p - 1;
															{panic!("lexer diagnostic: unexpected char: {}", self.current_slice(ts, te)); // TODO char position
															}
														}}
													
												}
												289  => {
													{{p = ((te))-1;
															{let digits = self.current_slice(self.num_digits_s, self.num_suffix_s);
																
																// if digits.end_with? '_'.freeze
																//   diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
																//               range(@te - 1, @te)
																// elsif digits.empty? && @num_base == 8 && version?(18)
																//   # 1.8 did not raise an error on 0o.
																//   digits = '0'.freeze
																// elsif digits.empty?
																//   diagnostic :error, :empty_numeric
																// elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
																//   invalid_s = @num_digits_s + invalid_idx
																//   diagnostic :error, :invalid_octal, nil,
																//               range(invalid_s, invalid_s + 1)
																// end
																// 
																// if version?(18, 19, 20)
																//   emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
																//   p = @num_suffix_s - 1
																// else
																//   @num_xfrm.call(digits.to_i(@num_base))
																// end
																// fbreak;
																
																let token = Token::T_INTEGER(digits.parse::<isize>().unwrap());
																self.emit(token);
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												290  => {
													{{p = ((te))-1;
															{panic!("lexer diagnostic: unexpected char: {}", self.current_slice(ts, te)); // TODO char position
															}
														}}
													
												}
												291  => {
													{{match ( act  ) {
																128  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 279;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																129  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 489;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																130  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 640;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																131  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 465;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																132  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																			self.emit(token);
																		}
																		
																		
																		//   if version?(18) && tok == 'not'.freeze
																		//     fnext expr_beg; fbreak;
																		//   else
																		//     fnext expr_arg; fbreak;
																		//   end
																		// NOTE ignored ruby18
																		{(self.cs) = 420;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																133  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																			self.emit(token);
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																136  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			
																			let token = Token::T_CONSTANT(slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = (self.arg_or_cmdarg());
																		} {p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																140  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			
																			let token = Token::T_IDENTIFIER(slice);
																			self.emit(token);
																		}
																		
																		
																		// TODO WIP
																		// if !@static_env.nil? && @static_env.declared?(tok)
																		//   fnext expr_endfn; fbreak;
																		// else
																		//   fnext *arg_or_cmdarg; fbreak;
																		// end
																		{(self.cs) = (self.arg_or_cmdarg());
																		} {p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																142  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 640;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																143  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 489;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																
																_ => {}
															}
														}
													}
													
												}
												292  => {
													{{te = p+1;
															{p = tm - 1; {(self.cs) = 648;
																}}
														}}
													
												}
												293  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_NL;
																	self.emit(token);
																}
																
																{p = p - 1;
																} {(self.cs) = 135;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												294  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_NL;
																	self.emit(token);
																}
																
																{p = p - 1;
																} {(self.cs) = 135;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												295  => {
													{{p = ((te))-1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_NL;
																	self.emit(token);
																}
																
																{p = p - 1;
																} {(self.cs) = 135;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												296  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// @eq_begin_s = @ts
																// fgoto line_comment;
															}
														}}
													
												}
												297  => {
													{{te = p+1;
															{p = pe - 3 }
														}}
													
												}
												298  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 640;
																}}
														}}
													
												}
												299  => {
													{{te = p+1;
															{}
														}}
													
												}
												300  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												301  => {
													{{te = p;
															p = p - 1;
															{panic!("UNIMPL");
																// @eq_begin_s = @ts
																// fgoto line_comment;
															}
														}}
													
												}
												302  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 640;
																}}
														}}
													
												}
												303  => {
													{{p = ((te))-1;
															{{p = p - 1;
																} {(self.cs) = 640;
																}}
														}}
													
												}
												
												_ => {}
											}
											_nacts -= 1;
											_acts += 1;
										}
										
										
									}
									
								}
								_acts = ( _lexer_to_state_actions[((self.cs)) as usize] ) as i32;
								_nacts = ( _lexer_actions[(_acts ) as usize]
								) as u32;
								_acts += 1;
								while ( _nacts > 0  )
								{
									match ( _lexer_actions[(_acts ) as usize]
									) {
										53  => {
											{{ts = 0;
												}}
											
										}
										
										_ => {}
									}
									_nacts -= 1;
									_acts += 1;
								}
								
								
								if ( (self.cs) == 0  ) {
									_cont = 0;
									
								}
								if ( _cont == 1  ) {
									p += 1;
									
								}
							}
							
						}
					}
					
				}
			}
			
		}
		self.p = p;
		self.pe = pe;
		self.ts = ts;
		self.te = te;
		self.tm = tm;
		self.act = act;
		self.stack = stack;
		self.top = top;
		
		if self.tokens.borrow().is_empty() {
			return None;
		} else {
			return Some(self.tokens.borrow_mut().remove(0));
		}
	}
	
	// TODO CRITICAL utf8 uncompatible
	fn current_slice(&self, ts: i32, te: i32) -> String {
		self.input.chars().skip(ts as usize).take( ( te - ts ) as usize ).collect()
	}
	
	fn current_slice_as_token_from_table(&mut self, table_name: &str, current_slice: String) -> Token {
		match table_name {
		
		
			"PUNCTUATION" => {
				match current_slice.as_ref() {
				
					"=" => { return Token::T_EQL; },
					
					"&" => { return Token::T_AMPER2; },
					
					"|" => { return Token::T_PIPE; },
					
					"!" => { return Token::T_BANG; },
					
					"^" => { return Token::T_CARET; },
					
					"+" => { return Token::T_PLUS; },
					
					"-" => { return Token::T_MINUS; },
					
					"*" => { return Token::T_STAR2; },
					
					"/" => { return Token::T_DIVIDE; },
					
					"%" => { return Token::T_PERCENT; },
					
					"~" => { return Token::T_TILDE; },
					
					"," => { return Token::T_COMMA; },
					
					";" => { return Token::T_SEMI; },
					
					"." => { return Token::T_DOT; },
					
					".." => { return Token::T_DOT2; },
					
					"..." => { return Token::T_DOT3; },
					
					"[" => { return Token::T_LBRACK2; },
					
					"]" => { return Token::T_RBRACK; },
					
					"(" => { return Token::T_LPAREN2; },
					
					")" => { return Token::T_RPAREN; },
					
					"?" => { return Token::T_EH; },
					
					":" => { return Token::T_COLON; },
					
					"&&" => { return Token::T_ANDOP; },
					
					"||" => { return Token::T_OROP; },
					
					"-@" => { return Token::T_UMINUS; },
					
					"+@" => { return Token::T_UPLUS; },
					
					"~@" => { return Token::T_TILDE; },
					
					"**" => { return Token::T_POW; },
					
					"->" => { return Token::T_LAMBDA; },
					
					"=~" => { return Token::T_MATCH; },
					
					"!~" => { return Token::T_NMATCH; },
					
					"==" => { return Token::T_EQ; },
					
					"!=" => { return Token::T_NEQ; },
					
					">" => { return Token::T_GT; },
					
					">>" => { return Token::T_RSHFT; },
					
					">=" => { return Token::T_GEQ; },
					
					"<" => { return Token::T_LT; },
					
					"<<" => { return Token::T_LSHFT; },
					
					"<=" => { return Token::T_LEQ; },
					
					"=>" => { return Token::T_ASSOC; },
					
					"::" => { return Token::T_COLON2; },
					
					"===" => { return Token::T_EQQ; },
					
					"<=>" => { return Token::T_CMP; },
					
					"[]" => { return Token::T_AREF; },
					
					"[]=" => { return Token::T_ASET; },
					
					"{" => { return Token::T_LCURLY; },
					
					"}" => { return Token::T_RCURLY; },
					
					"`" => { return Token::T_BACK_REF2; },
					
					"!@" => { return Token::T_BANG; },
					
					"&." => { return Token::T_ANDDOT; },
					
					_ => { panic!("unreachable! no tokens in table PUNCTUATION"); }
				}
			},
			
			"PUNCTUATION_BEGIN" => {
				match current_slice.as_ref() {
				
					"&" => { return Token::T_AMPER; },
					
					"*" => { return Token::T_STAR; },
					
					"**" => { return Token::T_DSTAR; },
					
					"+" => { return Token::T_UPLUS; },
					
					"-" => { return Token::T_UMINUS; },
					
					"::" => { return Token::T_COLON3; },
					
					"(" => { return Token::T_LPAREN; },
					
					"{" => { return Token::T_LBRACE; },
					
					"[" => { return Token::T_LBRACK; },
					
					_ => { panic!("unreachable! no tokens in table PUNCTUATION_BEGIN"); }
				}
			},
			
			"KEYWORDS" => {
				match current_slice.as_ref() {
				
					"if" => { return Token::K_IF_MOD; },
					
					"unless" => { return Token::K_UNLESS_MOD; },
					
					"while" => { return Token::K_WHILE_MOD; },
					
					"until" => { return Token::K_UNTIL_MOD; },
					
					"rescue" => { return Token::K_RESCUE_MOD; },
					
					"defined?" => { return Token::K_DEFINED; },
					
					"BEGIN" => { return Token::K_LBEGIN; },
					
					"END" => { return Token::K_LEND; },
					
					"class" => { return Token::K_CLASS; },
					
					"module" => { return Token::K_MODULE; },
					
					"def" => { return Token::K_DEF; },
					
					"undef" => { return Token::K_UNDEF; },
					
					"begin" => { return Token::K_BEGIN; },
					
					"end" => { return Token::K_END; },
					
					"then" => { return Token::K_THEN; },
					
					"elsif" => { return Token::K_ELSIF; },
					
					"else" => { return Token::K_ELSE; },
					
					"ensure" => { return Token::K_ENSURE; },
					
					"case" => { return Token::K_CASE; },
					
					"when" => { return Token::K_WHEN; },
					
					"for" => { return Token::K_FOR; },
					
					"break" => { return Token::K_BREAK; },
					
					"next" => { return Token::K_NEXT; },
					
					"redo" => { return Token::K_REDO; },
					
					"retry" => { return Token::K_RETRY; },
					
					"in" => { return Token::K_IN; },
					
					"do" => { return Token::K_DO; },
					
					"return" => { return Token::K_RETURN; },
					
					"yield" => { return Token::K_YIELD; },
					
					"super" => { return Token::K_SUPER; },
					
					"self" => { return Token::K_SELF; },
					
					"nil" => { return Token::K_NIL; },
					
					"true" => { return Token::K_TRUE; },
					
					"false" => { return Token::K_FALSE; },
					
					"and" => { return Token::K_AND; },
					
					"or" => { return Token::K_OR; },
					
					"not" => { return Token::K_NOT; },
					
					"alias" => { return Token::K_ALIAS; },
					
					"__FILE__" => { return Token::K__FILE__; },
					
					"__LINE__" => { return Token::K__LINE__; },
					
					"__ENCODING__" => { return Token::K__ENCODING__; },
					
					_ => { panic!("unreachable! no tokens in table KEYWORDS"); }
				}
			},
			
			"KEYWORDS_BEGIN" => {
				match current_slice.as_ref() {
				
					"if" => { return Token::K_IF; },
					
					"unless" => { return Token::K_UNLESS; },
					
					"while" => { return Token::K_WHILE; },
					
					"until" => { return Token::K_UNTIL; },
					
					"rescue" => { return Token::K_RESCUE; },
					
					"defined?" => { return Token::K_DEFINED; },
					
					"BEGIN" => { return Token::K_LBEGIN; },
					
					"END" => { return Token::K_LEND; },
					
					"class" => { return Token::K_CLASS; },
					
					"module" => { return Token::K_MODULE; },
					
					"def" => { return Token::K_DEF; },
					
					"undef" => { return Token::K_UNDEF; },
					
					"begin" => { return Token::K_BEGIN; },
					
					"end" => { return Token::K_END; },
					
					"then" => { return Token::K_THEN; },
					
					"elsif" => { return Token::K_ELSIF; },
					
					"else" => { return Token::K_ELSE; },
					
					"ensure" => { return Token::K_ENSURE; },
					
					"case" => { return Token::K_CASE; },
					
					"when" => { return Token::K_WHEN; },
					
					"for" => { return Token::K_FOR; },
					
					"break" => { return Token::K_BREAK; },
					
					"next" => { return Token::K_NEXT; },
					
					"redo" => { return Token::K_REDO; },
					
					"retry" => { return Token::K_RETRY; },
					
					"in" => { return Token::K_IN; },
					
					"do" => { return Token::K_DO; },
					
					"return" => { return Token::K_RETURN; },
					
					"yield" => { return Token::K_YIELD; },
					
					"super" => { return Token::K_SUPER; },
					
					"self" => { return Token::K_SELF; },
					
					"nil" => { return Token::K_NIL; },
					
					"true" => { return Token::K_TRUE; },
					
					"false" => { return Token::K_FALSE; },
					
					"and" => { return Token::K_AND; },
					
					"or" => { return Token::K_OR; },
					
					"not" => { return Token::K_NOT; },
					
					"alias" => { return Token::K_ALIAS; },
					
					"__FILE__" => { return Token::K__FILE__; },
					
					"__LINE__" => { return Token::K__LINE__; },
					
					"__ENCODING__" => { return Token::K__ENCODING__; },
					
					_ => { panic!("unreachable! no tokens in table KEYWORDS_BEGIN"); }
				}
			},
			
			_ => { panic!("unreachable! no such table"); }
		}
	}
	
	fn emit(&mut self, token: Token) {
		println!("lexer.emit: {:?}", token);
		self.tokens.borrow_mut().push(token);
	}
	
	// TODO NOTE
	fn arg_or_cmdarg(&self) -> i32 {
		if self.command_state { lexer_en_expr_cmdarg } else { lexer_en_expr_arg }
	}
	
	pub fn set_state(&mut self, state_name: &str) {
		match state_name {
			"interp_words" => { self.cs = lexer_en_interp_words; },
			"interp_string" => { self.cs = lexer_en_interp_string; },
			"plain_words" => { self.cs = lexer_en_plain_words; },
			"plain_string" => { self.cs = lexer_en_plain_string; },
			"interp_backslash_delimited" => { self.cs = lexer_en_interp_backslash_delimited; },
			"plain_backslash_delimited" => { self.cs = lexer_en_plain_backslash_delimited; },
			"interp_backslash_delimited_words" => { self.cs = lexer_en_interp_backslash_delimited_words; },
			"plain_backslash_delimited_words" => { self.cs = lexer_en_plain_backslash_delimited_words; },
			"regexp_modifiers" => { self.cs = lexer_en_regexp_modifiers; },
			"expr_variable" => { self.cs = lexer_en_expr_variable; },
			"expr_fname" => { self.cs = lexer_en_expr_fname; },
			"expr_endfn" => { self.cs = lexer_en_expr_endfn; },
			"expr_dot" => { self.cs = lexer_en_expr_dot; },
			"expr_arg" => { self.cs = lexer_en_expr_arg; },
			"expr_cmdarg" => { self.cs = lexer_en_expr_cmdarg; },
			"expr_endarg" => { self.cs = lexer_en_expr_endarg; },
			"expr_mid" => { self.cs = lexer_en_expr_mid; },
			"expr_beg" => { self.cs = lexer_en_expr_beg; },
			"expr_labelarg" => { self.cs = lexer_en_expr_labelarg; },
			"expr_value" => { self.cs = lexer_en_expr_value; },
			"expr_end" => { self.cs = lexer_en_expr_end; },
			"leading_dot" => { self.cs = lexer_en_leading_dot; },
			"line_begin" => { self.cs = lexer_en_line_begin; },
			_ => { panic!("unknown state name"); }
		}
	}
}
